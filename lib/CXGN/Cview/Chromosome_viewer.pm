
use strict;

package CXGN::Cview::Chromosome_viewer;

use CXGN::VHost;
use CXGN::DB::Connection;
use File::Spec;
use CXGN::Tools::WebImageCache;
use CXGN::Cview::Map::Tools;
use CXGN::Cview;
use CXGN::Cview::Utils qw | set_marker_color get_maps_select get_chromosome_links|; 
use CXGN::Cview::MapImage;
use CXGN::Cview::Chromosome;
use CXGN::Cview::Chromosome::Physical;
use CXGN::Cview::Chromosome::PachyteneIdiogram;
use CXGN::Cview::IL;
use CXGN::Cview::ChrLink;
use CXGN::Cview::MapFactory;


use base qw | CXGN::DB::Object |;

return 1;

=head1 NAME

CXGN::Cview::Chromosome_viewer -- a module to display comparative chromosome maps

=head1 SYNOPSIS

 my $viewer = chromosome_viewer -> new();
 $viewer -> set_map_id($map_id);
 $viewer -> set_map_version_id($map_version_id);
 $viewer -> set_ref_chr($chr_nr);
 $viewer -> set_cM($cM);
 $viewer -> set_zoom($zoom);
 $viewer -> set_show_physical($show_physical);
 $viewer -> set_show_ruler($show_ruler);
 $viewer -> set_show_IL($show_IL);
 $viewer -> set_comp_map_id($comp_map_id);
 $viewer -> set_comp_map_version_id($comp_map_version_id);
 $viewer -> set_comp_chr($comp_chr);
 $viewer -> set_color_model($color_model);
 if ($map_chr_select) { 
     my ($comp_map_id, $comp_chr) = split / /, $map_chr_select; 
     $viewer->set_comp_map_id($comp_map_id);
     $viewer->set_comp_chr($comp_chr);
 }
 $viewer -> set_cM_start($cM_start);
 $viewer -> set_cM_end($cM_end);
 $viewer -> set_confidence($confidence);
 $viewer -> set_show_zoomed($show_zoomed);
 $viewer -> set_hilite_zoomed($zoomed_hilite_start, $zoomed_hilite_end);
 $viewer -> set_force($force);

 $viewer -> generate_page();

=head1 DESCRIPTION

=head2 Image Caching

Chromosome_viewer caches the images it produces using CXGN::Tools::WebImageCache. The expiration time is set to a day or so.

The cache for the image generated by any given URL can be reset by setting the force parameter to 1.


=head1 AUTHOR(S)

Lukas Mueller (lam87@cornell.edu)

=head1 FUNCTIONS
    
The following functions are defined in the class:

=cut


=head2 function new()

  Synopsis:     generates a new chromosome_viewer object
  Parameters:   $dbh - a database handle 
  Returns:      an object handle
  Side effects: sets some useful default values, creates an SGN page object and
                establishes a connection to the database through the page object.
  Status:       implemented
  Example:

=cut


sub new { 
    my $class = shift;
    my $dbh = shift;

    if (! $dbh) { die "Chromosome_viewer now takes a dbh parameter."; }
    my $self = $class->SUPER::new($dbh, @_);

    $self -> {unzoomedheight} = 20; # how many cM are seen at zoom level 1    
#    $self -> {raster_size} = 5;    # the default raster size for genetic maps
                                    # for sequence-based maps this will be changed to 1
                                    # later on.
    $self->set_temp_dir("/tmp");    # set some default for the temp_dir. However, this
                                    # should be visible by apache (which tmp isn't).
    return $self;
}

=head2 function _adjust_parameters()

  Synopsis:     adjusts parameters; needs to be called before calling generate_image
  Parameters:   none
  Returns:      nothing
  Side effects: adjusts parameters to make program more robust against out-of-range 
                parameters
  Status:       implemented
  Example:
  Notes:        this function is only used internally

=cut

sub _adjust_parameters { 
    my $self = shift;

    # initialize some variables to prevent undefined blabla errors
    $self->{fatal_errors}="";
    if (!$self->get_ref_chr()) { $self->set_ref_chr(1); }
    if (!$self->get_hilite()) { $self->set_hilite(""); }
    if (!($self->get_cM_start())) { $self->set_cM_start(0); }

#    print STDERR "\n *** Map ID is : ".($self->get_map_id())." ***\n";

    # It's possible for our objects to have empty strings for map_id attributes. 
    # The following weirdness preserves the interface invariant that get_map_id sets
    # a desirable default map_id.

    my $map_id = $self->get_map_id();

    if ($self->get_map_version_id()) { 
	$self->set_map_id(0);
    }
    
    if ($self->get_comp_map_version_id()) { 
	$self->set_comp_map_id(0);
    }

    if (!$self->get_map_version_id() && $map_id eq '') { 
	$self->set_map_id(undef); 
	$map_id = $self->get_map_id(); 
    }

    # generate the map objects
    #
    my $map_factory = CXGN::Cview::MapFactory->new($self->get_dbh(), $self->get_db_backend());
#    print STDERR "Generating MapFactory with id ".$self->get_map_version_id()."\n";
#    print STDERR "IS A ".ref($map_factory)."\n";

    $self->set_ref_map( $map_factory->create( {map_version_id => $self->get_map_version_id(), map_id => $self->get_map_id()} ));

    if (!$self->get_ref_map()) { 
	# if an illegal map id was supplied, create a default map.
	$self->set_ref_map( $map_factory->create({map_id=> CXGN::Cview::Map::Tools::current_tomato_map_id()}) );
	$self->append_error("Note: Displaying default map, F2-2000.");
    }
    
    $self->{ref_map_name}=$self->get_ref_map()->get_short_name();
    $self->set_map_version_id($self->get_ref_map()->get_id());
    $self->{ref_map_type}=$self->get_ref_map()->get_type();
    
    if ($self->get_comp_map_id() || $self->get_comp_map_version_id()) { 
	$self->set_comp_map( $map_factory->create( { map_version_id =>$self->get_comp_map_version_id(), map_id => $self->get_comp_map_id() } ) );
					    #   { map_id => $self->get_comp_map_id(),
					#	 map_version_id => $self->get_comp_map_version_id(),
					 #    }
					  #     ));
    }


    # define the comparison map
    #
    if ($self->get_comp_map()) { 
	$self->{comp_map_name} = $self->get_comp_map()->get_short_name();
	$self->set_comp_map_version_id($self->get_comp_map()->get_id());
	$self->{comp_map_type} = $self->get_comp_map()->get_type();
#    @{$self->{comp_chromo_names}} = $self->get_chr_names($self->get_comp_map_id());
	@{$self->{comp_chromo_names}} = $self->get_comp_map()->get_chromosome_names();
	#$self->{comp_max_chr} = $self->get_chr_count($self->get_comp_map_id());
	$self->{comp_max_chr} = scalar(@{$self->{comp_chromo_names}});
    }

    # test if the supplied chromosome is a legal chromosome on the specific map.
    # if not, try to find a close match.
    #
    #if (!$self->is_ok_chr($self->get_map_id(), $self->get_ref_chr())) { 
    if (!$self->get_ref_map()->has_linkage_group($self->get_ref_chr())) { 
#	print STDERR "chr ".$self->get_ref_chr()." is not a valid chromosome\n";
	my $old_chr = $self->get_ref_chr();
	my $chr = $old_chr;
	$chr =~ s/.*(\d{1,2}.*)/$1/;
	#if (!$self->is_ok_chr($self->get_map_id(), $chr)) { 
	if (!$self->get_ref_map()->has_linkage_group($chr)) { 
	    $chr =~ s/.*(\d).*/$1/;
	}      
	if (!$self->get_ref_map()->has_linkage_group($chr)) { 
	    #$self->append_errors("The specified chromosome ($old_chr) was not found on map $self->{ref_map_name}!<br /><br />");
	    $self->set_ref_chr(1);
	}
	else {
	    $self->set_ref_chr($chr);
	    $self->append_error("The chromosome/linkage group $old_chr does not seem to exist on map ".$self->get_ref_map()->get_short_name().". The closest we could find was $chr, displayed below.<br /><br />");
	}
    }


    # if no map_id was supplied, we show the F2.2000 as default
    #
    if (!$self->get_map_id()) { $self->set_map_id(CXGN::Map::Tools::current_tomato_map_id()); }

#    @{$self->{chromo_names}} = $self->get_chr_names($self->{map_id});
    @{$self->{chromo_names}} = $self->get_ref_map()->get_chromosome_names();

    #$self->{max_chr} = $self->get_chr_count($self->get_map_id());;
    # get the number of chromosomes of the map.
    #
    $self->{max_chr} = scalar($self->get_ref_map()->get_chromosome_count());

    if ($self->get_ref_chr()<0) { $self->set_ref_chr(abs($self->get_ref_chr())); }

     # set the default zoom size in MB for sequence maps
     #
    $self->{unzoomedheight}=$self->get_ref_map()->initial_zoom_height();
# 	$self->{unzoomedheight}=4; 
#     }

    #
    # adjust cM_start and cM_end if the chromosome was clicked.
    #
#    if ((($self->get_cM_start()==0) && ($self->get_cM_end()==0)) || ($self->get_cM_end()-$self->get_cM_start()==0)) { 

    $self->set_ref_chr_len($self->get_ref_map()->get_chr_len_by_name($self->get_ref_chr()));
    if ($self->get_cM_start() > $self->get_cM_end()) { 
	$self->set_cM_start($self->get_cM_end());
	$self->set_cM_end($self->get_cM_start() + $self->get_ref_map()->initial_zoom_height());
    }
	
    $self->{zoom_length} = $self->get_cM_end() - $self->get_cM_start();

    if ($self->{zoom_length} == 0) { 
	$self->{zoom_length} = $self->get_ref_map()->initial_zoom_height(); 
    }

    if ($self->get_clicked()) { 


	#die "Was going to reset cM_start and cM_end (cM defined... ".($self->get_cM()).")\n";
	my $start = $self->get_cM()-($self->{zoom_length}/2);
	my $end = $self->get_cM()+($self->{zoom_length}/2);
	
	if ($start < 0 ) { 
	    $start = 0;
	    $end = $self->{zoom_length};
	}

#	print STDERR "REF CHR: ".$self->get_ref_chr()."\n";

	if ($end > $self->get_ref_chr_len()) { 
	    $end = $self->get_ref_chr_len();
	    $start = $end - $self->{zoom_length};
	}
	
	$self->set_cM_start($start);
	$self->set_cM_end($end);
	
    }
#    $self->set_clicked(0);
    
    # adjust the cM start value if it is below zero. This could (but shouldn't) happen 
    # during scrolling and zooming operations.
    #
    if ($self->get_cM_start() < 0) { 
	$self->set_cM_start(0); 
	$self->set_cM_end($self->{zoom_length});
	$self->set_cM(($self->get_cM_start()+$self->get_cM_end())/2);
    }  
    if ($self->get_cM_end() > $self->get_ref_chr_len()) { 
	my $end =  $self->get_ref_chr_len();
	$self->set_cM_end($end);
	$self->set_cM_start($end-$self->{zoom_length});
    }
    
    if (!$self->{ref_map_name}) { $self->{fatal_errors} .= "Fatal error: The map id you entered is invalid.<br />"; }

    if ($self->get_show_physical() && (!$self->get_ref_map()->has_physical())) { 
	$self->append_error("Note: You selected to show physical maps for a map that does not have an associated physical map. The physical map has been turned off.<p /> ");
	$self->set_show_physical(0);
    }
    
    my $message="";
    if ($self->get_confidence()==0) { $message= "I(LOD<2) and above [all]"; }
    elsif ($self->get_confidence()==1) { $message = "I(LOD2) and above"; }
    elsif ($self->get_confidence()==2) { $message = "CF(LOD3) and above"; }
    elsif ($self->get_confidence()==3) { $message = "F(LOD>=3)"; }
    if ($self->get_confidence()>-2) { $self->append_error("Only showing confidence of $message\n<p />"); } 

    # note: the force parameter is not part of the state hashref, because it 
    # would change the key and thus the cache file name. 
    #
    my $state_hashref = {  
	                 chr_nr => $self->get_ref_chr(),
		         map_version_id => $self->get_map_version_id(),
			 cM     => $self->{cM},
			 show_ruler => $self->{show_ruler},
			 show_IL => $self->{show_IL},
			 show_offsets => $self->get_show_offsets(),
			 comp_map_version_id => $self->get_comp_map_version_id(),
			 comp_chr => $self->{comp_chr},
			 color_model => $self->{color_model},
			 show_physical => $self->{show_physical},
			 size => $self->{size},
			 show_zoomed => $self->{show_zoomed},
			 confidence => $self->{confidence},
			 hilite => $self->{hilite},
			 marker_type => $self->{display_marker_type},
			 cM_start => $self->get_cM_start(),
			 cM_end => $self->get_cM_end(),
			 #clicked => $self->get_clicked(),

		     };

#    print STDERR "STATE HASHREF CONTENTS: \n";
#    foreach my $k (%$state_hashref) { 
##	print STDERR "$k = $$state_hashref{$k}.\n";
#    } 
    $self->set_state_hashref($state_hashref);
    
}


=head2 function generate_page()

  Synopsis:     generates the  page to STDOUT in html
  Parameters:   none
  Returns:      nothing
  Side effects: 
  Status:       implemented
  Example:

=cut

sub generate_page { 
    my $self = shift;
   if ($self->{fatal_errors}) { return; }

    $self->_adjust_parameters();

    $self->get_image();
    $self->display_toolbar();

}

=head2 function get_image()

  Synopsis:     generates the viewer image as a png file 
  Parameters:   none
  Returns:      an array with the image path (semi-absolute) and the image url
  Side effects: creates the image and stores it into a file
  Status:       implemented
  Example:

=cut

sub get_image {
    my $self = shift;

    my $cache = CXGN::Tools::WebImageCache->new();
    my $state_hashref = $self->get_state_hashref();
#    my $vhost_conf=CXGN::VHost->new();
    my @sorted_values = map { $state_hashref->{$_} } sort keys %$state_hashref;
    my $key = join "-", @sorted_values;
#    print STDERR "USING KEY: $key\n";
    $cache->set_key($key);
    $cache->set_expiration_time(86400);
    $cache->set_basedir($self->get_basedir()); 
    #vhost_conf->get_conf('basepath'));
    $cache->set_temp_dir($self->get_temp_dir());
#File::Spec->catfile($vhost_conf->get_conf('tempfiles_subdir'), "/cview"));
    $cache->set_map_name("imagemap");
    $cache->set_force( $self->get_force() );

    if (! $cache->is_valid()) { 
	$self->generate_image();
	$cache->set_image_data( $self->{map}->render_png_string() );
	$cache->set_image_map_data( $self->{map}->get_image_map("imagemap") );
    }
    $self->{image_html}= $cache->get_image_html();
}



sub generate_image { 
    my $self = shift;
    
    my $x_distance = 120; # the number of pixels the different elements are spaced
    my $element_count = 0.5; # the number of elements currently placed

    my $map_width = 500;

    if ($self->get_show_zoomed()) {
	$map_width+=$x_distance; 
    }
    if ($self->get_show_IL()) { $map_width+=$x_distance; }
    
    #print STDERR "Size requested: $self->{size}\n";
    if ($self->get_size() =~ /small/i) { 
	$self->{map_height} = 300;
	$self->set_chr_height(230);
    }
    elsif ($self->get_size()=~ /large/i) { 
	$self->{map_height} = 800;
	$self->set_chr_height(650);
    }
    else { 
	$self->{map_height} = 470;
	$self->set_chr_height(400);
    }
    
    #print STDERR "Chr height: $self->{chr_height}\n";
    $self->{map} = CXGN::Cview::MapImage -> new("", $map_width, $self->{map_height});
    
    # show IL lines if requested
    #    
    if ($self->get_show_IL() && $self->get_ref_map()->has_IL()) { 
	my $map_factory = CXGN::Cview::MapFactory->new($self->get_dbh(), $self->get_db_backend());
	#print STDERR "Current map_id = ".$self->get_map_id()."\n";
	my $IL_map = $map_factory->create({ map_version_id=>"il6.".($self->get_map_id()) });
	$self->{IL} = $IL_map->get_chromosome($self->get_ref_chr());
	
	$self->{IL} -> set_height($self->get_chr_height());
	$self->{IL} -> set_horizontal_offset($x_distance*$element_count, 40);
	$self->{IL} -> set_vertical_offset(40);
	$self->{IL} -> set_caption("IL");
	
	$self->{map}->add_chromosome($self->{IL});
	$element_count=$element_count+0.95;
    }
    
    elsif ($self->get_show_IL() && !$self->get_ref_map()->has_IL()) { 
	$self->append_error("You chose to display the IL information for a map that has no associated IL information. 
                           The IL display has been turned off.<P>");
	$self->set_show_IL(0); 
    }
    
    # show the physical map if requested
    #
    if ($self->get_show_physical()) {
	my $map_factory = CXGN::Cview::MapFactory->new($self->get_dbh(), $self->get_db_backend());
	
	my $physical_map = $map_factory -> create ( {map_version_id => "p9"});
	
	# we get the overview chromosome, because it is more compact for the comparison
	#
	$self->{p} = $physical_map->get_overview_chromosome($self->get_ref_chr()); 
	$self->{p}->set_horizontal_offset($x_distance*$element_count);
	$self->{p}->set_vertical_offset(40);
	$self->{p}->set_height($self->get_chr_height());
	
	$self->{map}->add_physical($self->{p});
    }
    
    # add the chromosome
    #
    $element_count++;
    
    $self->{c1} = $self->get_ref_map()->get_chromosome($self->get_ref_chr());
    #if ($self->get_show_offsets()) { $self->{c1}->set_display_marker_offset(); }
    #
    # adjust the appearance of the chromosome
    #
    $self->{c1}->set_height($self->get_chr_height());
    $self->{c1}->set_vertical_offset(40);
    $self->{c1}->set_horizontal_offset($x_distance * $element_count);
    $self->{c1}->set_caption($self->get_ref_chr());
    $self->{c1}->set_labels_left();
    $self->{c1}->set_units( $self->get_ref_map()->get_units() );
    $self->{c1}->set_width( $self->get_ref_map()->get_preferred_chromosome_width() );
    
    $self->append_error($self->get_ref_map()->get_messages());
    my @m = $self->{c1}->get_markers();    
    #
    # get the markers and determine the highest confidence level
    #
    my $highest = -1;
    foreach my $m (@m) {
	if ($m->get_confidence()>$highest) { $highest = $m->get_confidence(); }
    }
    my @fm = ();
    foreach my $m (@m) {
	if ($m->get_confidence() == $highest) { push @fm, $m; }

    }
    
    my $interval = 0;
    if ($self->get_ref_map()->collapsed_marker_count()) { 
	$interval = @fm/$self->get_ref_map()->collapsed_marker_count();
    }
   
   
    if (@m<$self->get_ref_map()->collapsed_marker_count()) { $interval=1; }
    my $frame_marker_count =0;
    for (my $i=0; $i<@m; $i++) {
	$m[$i]->hide_label();
	#
	# show label if it is hilited...
	#
	my $marker_name = $m[$i]->get_name();
	if ($self->get_hilite()=~ /\b$marker_name\b/i) {
	    $m[$i]->show_label();
	    $m[$i]->hilite();
	}
	#
	# otherwise only show one in $interval markers of the
	# highest confidence
	#
	if ($interval >0) { 
	    if ($m[$i]->get_confidence() == $highest) {
		if ($interval > 1) { 
		    if ($frame_marker_count % $interval==0) { 
			$m[$i] -> show_label();
		    } 
		    
		}
		else { $m[$i]->show_label(); }
		$frame_marker_count++;
	    }
	}
	
	#else { $m[$i]->set_url("/search/markers/markerinfo.pl?id=".$m[$i]->get_marker_name()); }
	set_marker_color($m[$i], $self->get_color_model());
	if ($m[$i]->get_confidence() < $self->get_confidence()) { $m[$i]->hide_label(); }
    }
    
    #
    # make the chromosome clickable using the rasterize function and 
    # add the url 
    #
    #my $raster_size = int($self->{c1}->get_length() / 20) || 2;
    if ($self->get_ref_map()->can_zoom()) { 
	$self->{c1}->rasterize(1); #$raster_size);
	$self->{c1}->set_rasterize_link("view_chromosome.pl?map_version_id=".($self->get_map_version_id())."&amp;chr_nr=".($self->get_ref_chr())."&amp;show_physical=".($self->get_show_physical())."&amp;show_IL=".($self->get_show_IL())."&amp;show_ruler=".($self->get_show_ruler())."&amp;show_offsets=".($self->get_show_offsets())."&amp;color_model=".($self->get_color_model())."&amp;comp_map_version_id=".($self->get_comp_map_version_id())."&amp;comp_chr=".($self->get_comp_chr())."&amp;zoom=".($self->get_zoom())."&amp;size=".($self->get_size())."&amp;hilite=".($self->get_hilite())."&amp;confidence=".($self->get_confidence())."&amp;show_zoomed=1&amp;marker_type=".($self->get_display_marker_type())."&amp;cM_start=".($self->get_cM_start())."&amp;cM_end=".($self->get_cM_end())."&amp;clicked=1&amp;cM=");
    }

    $self->{map} -> add_chromosome($self->{c1});
    #
    # show the ruler if requested
    #
    if ($self->get_show_ruler()) { 
	$self->{r} = $self->{c1}->get_ruler();
	$self->{r}->set_horizontal_offset($x_distance/6);
	$self->{r}->set_vertical_offset(40);
	$self->{r}->set_height($self->get_chr_height());
	$self->{r}->set_start_value(0);
	$self->{r}->set_end_value($self->{c1}->get_length());			     
	$self->{map}->add_ruler($self->{r});
    }
    #
    # draw the chromosome section if a chromosome section was requested 
    # (that is, if cM is defined)
    #
    
    my $x_offset = 200;
    my @m2; # the markers on c2. Keep for later use.
    if ($self->{show_zoomed} && $self->get_ref_map()->can_zoom()) { 

	$element_count++;

	#$self->{c2} = CXGN::Cview::Chromosome -> new ($self->get_ref_chr(), $self->get_chr_height(), $x_distance*$element_count, 40);
	$self->{c2} = $self->get_ref_map()->get_chromosome_section($self->get_ref_chr(), $self->get_cM_start(), $self->get_cM_end(), $self->get_comp_chr());
	if ($self->get_show_offsets()) { $self->{c2}->set_display_marker_offset(); }
	$self->{c2}->set_height($self->get_chr_height());
	$self->{c2}->set_vertical_offset(40);
	$self->{c2}->set_hilite($self->get_hilite_zoomed());
	$self->{c2}->set_horizontal_offset($x_distance*$element_count);


	# because we have incomplete length information from the query above, 
	# we set the length of the zoomed in chromosome
	# to be the same as the comparison chromosome (the length is simply 
	# the marker position of the bottom marker)
	#
	$self->{c2}->set_length($self->{c1}->get_length());
	# 
	# correct the cM_start and cM_end if out of range
	#
	#if ($self->get_cM_start() < 0) { $self->set_cM_start(0); }
	if ($self->get_cM_end()>$self->{c2}->get_length()) {
	    $self->set_cM_end($self->{c2}->get_length());
	}
	$self->{c2} ->set_units( $self->get_ref_map()->get_units() );
	$self->{c2} ->set_color(255, 220 ,220);
	@m2 = $self->{c2}->get_markers();

	# 
	# go through the markers and show them according to confidence filter,
	# add mark for overgo information etc.
	#
	for (my $i=0; $i<@m2; $i++) {
	    #
	    # hilite markers to be hilited
	    #
	    my $marker_name = $m2[$i]->get_name();
	    if ($self->get_hilite()=~/\b$marker_name\b/i) {
		$m2[$i]->hilite();
		$m2[$i]->get_label()->set_hidden(0);
	    }
	    #
	    # hide markers with confidence below confidence threshold
	    #
	    if ($m2[$i]->get_confidence() < $self->{confidence}) { 
		$m2[$i]->hide_label(); 
	    }
	    #
	    # hide markers that are not of the type that should be displayed
	    #
	    my $marker_type = $self->get_display_marker_type();
	    if ($self->get_display_marker_type() && ($m2[$i]->get_marker_type()!~/$marker_type/i)) {
		$m2[$i]->hide_label();
	    }
	   set_marker_color($m2[$i], $self->get_color_model());
	    
	    #
	    # set the url only if the marker is visible (otherwise imagemap outside the image will be 
	    # generated that confuses some browsers (such as Explorer).
	    #
	    if ($m2[$i]->is_visible()) {
#		if (!$m2[$i]->get_url()) { # some url's may already be set in the data adapter.
#		    $m2[$i]->set_url( $self->get_ref_map()->get_marker_link($m2[$i]->get_id()) );
#		}
		
	    }
	    else { 
		#$m[$i]->set_url("");
		$m[$i]->hide_mark();
	    }
	}
	#
	# set up the section and connections to the left hand chromosome
	#
	$self->{c2} -> set_section($self->get_cM_start(), $self->get_cM_end());
	$self->{c1} -> set_hilite_color(255, 220,220);
	$self->{c1} -> set_hilite($self->get_cM_start(), $self->get_cM_end());
	$self->{link1} = CXGN::Cview::ChrLink -> new ($self->{c1}, $self->get_cM_start(), $self->{c2}, $self->get_cM_start());
	$self->{link1} -> set_color(10, 10, 10);
	$self->{link2} = CXGN::Cview::ChrLink -> new ($self->{c1}, $self->get_cM_end(), $self->{c2}, $self->get_cM_end());
	$self->{link2} -> set_color(10, 10, 10);
	$self->{map}->add_chr_link($self->{link1});
	$self->{map}->add_chr_link($self->{link2});
    
	$self->{map} -> add_chromosome($self->{c2});
    }
    #
    # draw the map comparison if the map comparison was requested (comp_map comp_chr will be defined).
    #
    my @m3;
    if ($self->get_comp_map() && $self->get_comp_chr()) {

	#print STDERR "Generating the comparative map...\n";

	$element_count++;

	#$self->{c3} = CXGN::Cview::chromosome -> new ($self->get_comp_chr(), $self->{chr_height}, $x_distance * $element_count, 40);

	$self->{c3}=$self->get_comp_map()->get_chromosome($self->get_comp_chr());

	$self->{c3}->set_height($self->get_chr_height());
	$self->{c3}->set_horizontal_offset($x_distance * $element_count);
	$self->{c3}->set_vertical_offset(40);
	$self->{c3}->set_units( $self->get_comp_map()->get_units() );
	
	#print STDERR "Fetching map $self->{comp_map} chr $self->{comp_chr} from the database...\n"; 
	
	#print STDERR "Adjusting colors etc...\n";
	$self->{c3} ->set_color(150, 150 ,200);
	$self->{c3} ->set_caption($self->get_comp_chr());
	
	@m3 = $self->{c3}->get_markers();
	#print STDERR "$self->{comp_chr} has ".@m3." markers...\n";
	for (my $i=0; $i<@m3; $i++) {
	    
	    #print STDERR "Marker read:". $m3[$i]->get_name()."\n";
	    CXGN::Cview::Utils::set_marker_color($m3[$i], $self->get_color_model());
	    #$m3[$i]->set_url("/search/markers/markerinfo.pl?type=".$m3[$i]->get_marker_type()."&amp;id=".$m3[$i]->get_marker_name());; 
	}

	#print STDERR "Adding the chromosome to the map...\n";
	$self->{map}->add_chromosome($self->{c3});
	#
	# determine if the magnified section exists -- then draw the correspondence lines to that chromosome object (c2)
	# else draw them to the original chromosome object (c1).
	#
	if (exists($self->{c2})) {
	    $self->{c2}->set_labels_left();

	    my $link_list = get_chromosome_links($self->{c2}, $self->{c3});
	    foreach my $clink ($link_list->get_link_list()) { 
		$self->{map}->add_chr_link($clink);
	    }
		    
	    foreach my $m3 (@m3) {
		$m3->hide_label();
		if ($link_list->has_link($m3->get_marker_name())) { 
		    $m3->show_label();
		}
		
		if ($m3->get_confidence < $self->{confidence}) { $m3->hide_label(); }
		my $marker_name = $m3->get_name();
		if ($self->get_hilite()=~/\b$marker_name\b/i) {
		    $m3->show_label();
		    $m3->hilite();
		}
	    }
	}
	else {
	    #print STDERR "LINKS:::::::::::::::\n";
	    my $link_list = get_chromosome_links($self->{c1}, $self->{c3});
	    foreach my $clink ($link_list->get_link_list()) { 
		#print STDERR "  adding link...\n";
		$self->{map}->add_chr_link($clink);
	    }
	    foreach my $m3 (@m3) {
		$m3->hide_label();
		set_marker_color($m3, $self->get_color_model());

 		if ($link_list->has_link($m3->get_marker_name())) { 
 		    $m3->show_label();
 		}
		if ($m3->get_confidence < $self->{confidence}) { $m3->hide_label(); }
		if ($m3->get_name() eq $self->get_hilite()) {
		    $m3->show_label();
		    $m3->hilite();
		}
	    }
	}
	$element_count++;
	if ($self->get_show_ruler()) { 
	    $self->{r3} = $self->{c3}->get_ruler();
	    $self->{r3}->set_horizontal_offset($element_count*$x_distance);
	    $self->{r3}->set_vertical_offset(40);
	    $self->{r3}->set_height($self->get_chr_height());
	    $self->{r3}->set_start_value(0);
	    $self->{r3}->set_end_value($self->{c3}->get_length());

	    $self->{map}->add_ruler($self->{r3});
	}
    }	
}




=head2 function get_chr_height()

  Synopsis:	Accessor for the chr_height property
  Arguments:	none
  Returns:	the current chr_height
  Side effects:	The chromosomes are being drawn with the chr_height in pixels
  Description:	

=cut

sub get_chr_height { 
    my $self=shift;
    return $self->{chr_height};
}

=head2 function set_chr_height()

  Synopsis:	
  Arguments:	the chromosome height in pixels. In small mode, height is 230 pixels, and
                normal mode the height is 400 pixels.
  Returns:	
  Side effects:	
  Description:	

=cut

sub set_chr_height { 
    my $self=shift;
    $self->{chr_height}=shift;
}

=head2 accessors get_ref_map(), set_ref_map()

 Usage:        
 Desc:          
 Args/Ret:     the reference map as a CXGN::Cview::Map object
               of the appropriate sub-class.
 Side Effects: this will be the map displayed as the reference
               map (on the left).
 Example:

=cut

sub get_ref_map {
  my $self=shift;
  if (!exists($self->{ref_map})) { $self->{ref_map}=undef; }
  return $self->{ref_map};

}

sub set_ref_map {
  my $self=shift;
  $self->{ref_map}=shift;
}

=head2 accessors get_comp_map(), set_comp_map()

  Usage:
  Property:     the comparison map, as a CXGN::Cview::Map object
                (or subclass thereof)
  Desc:         
  Side Effects:
  Example:

=cut

sub get_comp_map {
  my $self=shift;
  if (!exists($self->{comp_map})) { $self->{comp_map}=undef; }
  return $self->{comp_map};

}

sub set_comp_map {
  my $self=shift;
  $self->{comp_map}=shift;
}




=head2 accessors set_map_id(), get_map_id()

  Synopsis:     sets the map_id for the reference chromosome
  Parameters:   map_id (integer)
  Returns:      
  Side effects: the map corresponding to map_id will be drawn as the reference chromosome
  Status:       DEPRECATED. Call $chr_viewer->get_ref_map()->get_id() instead...
  Example:

=cut

sub set_map_id {
    my $self = shift;
    $self->{map_id}=shift;
}

sub get_map_id {
    my $self = shift;
#    if (!exists($self->{map_id})) { $self->{map_id}=0; }
    if (!exists($self->{map_id})) { $self->{map_id}=0; }
    return $self->{map_id};
}

=head2 accessors get_map_version_id(), set_map_version_id()

 Usage:
 Desc:         the map_version_id of the reference map
 Ret:
 Args:
 Side Effects:
 Example:

=cut

sub get_map_version_id {
  my $self=shift;
  return $self->{map_version_id};

}

sub set_map_version_id {
  my $self=shift;
  $self->{map_version_id}=shift;
}

=head2 accessors get_comp_map_version_id(), set_comp_map_version_id()

 Usage:
 Desc:         the map_version_id of the comparison map
 Ret:
 Args:
 Side Effects:
 Example:

=cut

sub get_comp_map_version_id {
  my $self=shift;
  return $self->{comp_map_version_id};

}

sub set_comp_map_version_id {
  my $self=shift;
  $self->{comp_map_version_id}=shift;
}

=head2 function set_comp_map_id()

  Synopsis:     setter function for the map id of the comparison chromosome
  Parameters:   the map id (integer)
  Returns:      nothing
  Side effects: the specified map will be drawn as the reference chromosome
  Status:       implemented
  Example:

=cut

sub set_comp_map_id {
    my $self = shift;
    $self->{comp_map_id}=shift;
}

=head2 function get_comp_map_id()

  Synopsis:     get the current map id of the comparison chromosome
  Parameters:   
  Returns:      map id of the comparison chromosome
  Side effects:       
  Status:       implemented
  Example:

=cut

sub get_comp_map_id {
    my $self = shift;
    if (!exists($self->{comp_map_id})) { $self->{comp_map_id}=0; }
    return $self->{comp_map_id};
}

=head2 function set_ref_chr()

  Synopsis:     setter function for the specifying the reference chromosome 
                number/linkage group name
  Parameters:   the desired chromosome number/linkage group name (string)
  Returns:      
  Side effects: the specified chromosome/linkage group will be displayed as 
                the reference chromosome
  Status:       implemented
  Example:

=cut

sub set_ref_chr {
    my $self = shift;
    $self->{chr_nr}=shift;
}

=head2 function get_ref_chr()

  Synopsis:     accessor function for set_ref_chr
  Parameters:   
  Returns:      the chromosome number/linkage group name for the reference 
                chromosome/linkage group
  Side effects:       
  Status:       implemented
  Example:

=cut 

sub get_ref_chr {
    my $self = shift;
    if (!exists($self->{chr_nr}) || !defined($self->{chr_nr})) { $self->{chr_nr}=0; }
    return $self->{chr_nr};
}

=head2 function set_comp_chr()

  Synopsis:     setter function for specifying the comparison chromosome/linkage
                group
  Parameters:   chromosome number/linkage group name 
  Returns:      nothing
  Side effects: the corrsponding chromosome will be drawn as the comparison chromosome
  Status:       implemented
  Example:

=cut 

sub set_comp_chr {
    my $self = shift;
    $self->{comp_chr}=shift;
}

=head2 function get_comp_chr()

  Synopsis:     accessor function for set_comp_chr
  Parameters:   
  Returns:      
  Side effects:       
  Status:       implemented
  Example:

=cut

sub get_comp_chr {
    my $self = shift;
    if (!exists($self->{comp_chr})) { $self->{comp_chr}=0; }
    return $self->{comp_chr};
}

=head2 accessors get_ref_chr_len, set_ref_chr_len

 Usage:
 Desc:
 Property
 Side Effects:
 Example:

=cut

sub get_ref_chr_len {
  my $self = shift;
  return $self->{ref_chr_len}; 
}

sub set_ref_chr_len {
  my $self = shift;
  $self->{ref_chr_len} = shift;
}



=head2 function set_cM_start()

  Synopsis:     for a chromosome section, sets the starting point in cM
  Parameters:   cM start position
  Returns:      nothing
  Side effects: cleans the input to be an integer
  Status:       implemented
  Example:

=cut

sub set_cM_start {
    my $self = shift;
    my $cM_start = shift;
   $cM_start =~ s/[^0-9.]//g;
    #$cM_start =~ s/.*?(\d+\.?\d*).*/$1/;
    $self->{cM_start}=abs($cM_start);
}

=head2 function get_cM_start()

  Synopsis:     accessor function for the cM_start property
  Parameters:   
  Returns:      
  Side effects:       
  Status:       implemented
  Example:

=cut

sub get_cM_start {
    my $self = shift;
    if (!exists($self->{cM_start}) || !defined($self->{cM_start})) { $self->{cM_start}=0; }
    
    return sprintf "%.2f", $self->{cM_start};
}

=head2 function set_cM_end()

  Synopsis:     sets the end of a chromosome /linkage group section, in cM
  Parameters:   cM of end of section
  Returns:      nothing
  Side effects: On a chromosome section, this will define the endpoints of the section.
                If set_section has not been called, this will define which section is 
                hilited. The cM and zoom property will be automatically re-calculated.
  Status:       implemented
  Example:

=cut

sub set_cM_end {
    my $self = shift;
    my $cM_end = shift;
   $cM_end =~ s/[^0-9.]//g;
    if ($cM_end eq "" || !$cM_end) { $cM_end=0; }
    $self->{cM_end}=abs(($cM_end));
}

=head2 function get_cM_end()

  Synopsis:     accessor function for the cM_end property
  Parameters:   
  Returns:      
  Side effects:       
  Status:       implemented
  Example:

=cut

sub get_cM_end {
    my $self = shift;
    if (!exists($self->{cM_end}) || !defined($self->{cM_end})) { $self->{cM_end}=0; }
    return sprintf "%.2f", $self->{cM_end};
}

=head2 function set_cM()

  Synopsis:     sets the cM property. This is the approximate location in which
                the user has clicked. If set_cM is set, cM_start and cM_end will be
                calculated automatically using the current zoom levels.
  Parameters:   the cM position (integer)
  Returns:      nothing
  Side effects: recalculates cM_start and cM_end.
  Status:       implemented
  Example:

=cut

sub set_cM {
    my $self = shift;
    $self->{cM}=shift;
}

=head2 function get_cM()

  Synopsis:     accessor function for the cM property   
  Parameters:   
  Returns:      
  Side effects:       
  Status:       implemented
  Example:

=cut

sub get_cM {
    my $self = shift;
    if (!exists($self->{cM})) { $self->{cM}=0; }
    return $self->{cM};
}

=head2 function set_zoom()

  Synopsis:     sets the zoom level on the reference chromosome 
  Parameters:   zoom level (1..10). 10 is the highest zoom level (most enlarged section
		showing fewer markers). Zoom levels outside the legal range are rounded to 
                the nearest legal value.
  Returns:      nothing
  Side effects:       
  Status:       Deprecated. Zooming is now implemented by setting cM_start and cM_end
  Example:

=cut

sub set_zoom {
    my $self = shift;
    $self->{zoom}=shift;
    if (!exists($self->{zoom}) || $self->{zoom} eq "") { $self->{zoom}=0; }
    if ($self->{zoom}==0) { $self->{zoom} =1; }
    if ($self->{zoom} > 10) { $self->{zoom} =10; }
}

=head2 function get_zoom()

  Synopsis:     accessor function for the zoom property. 
  Parameters:   
  Returns:      the current zoom level (1..10)
  Side effects:       
  Status:       Deprecated. Zooming is now implented by directly setting cM_start and cM_end.
  Example:

=cut

sub get_zoom {
    my $self=shift;
    if (!exists($self->{zoom})) { $self->{zoom}=1; }
    return $self->{zoom};
}

=head2 accessors get_clicked, set_clicked

 Usage:        my $flag = $cv -> get_clicked()
 Desc:         returns true if this page should be regenerated
               as a response to a user clicking on the chromosome
               (instead of using some of the toolbar buttons),
               false otherwise.
 Property:
 Side Effects:
 Example:

=cut

sub get_clicked {
    my $self = shift;
    return $self->{clicked}; 
}

sub set_clicked {
    my $self = shift;
    $self->{clicked} = shift;
}



=head2 function get_show_ruler()

  Synopsis:     accessor function for the show_ruler property.
  Parameters:   none
  Returns:      true if ruler is shown, false otherwise
  Side effects:       
  Status:       implemented
  Example:

=cut

sub get_show_ruler {
    my $self = shift;
    if (!exists($self->{show_ruler})) { $self->{show_ruler}=0; }
    return $self->{show_ruler};
}

=head2 function set_show_ruler()

  Synopsis:     setter function for the show_ruler property.
  Parameters:   true or false (0 or 1)
  Returns:      nothing
  Side effects: true causes the ruler to be displayed for both the reference and comparison map
                (if present), false hides the ruler.
  Status:       implemented
  Example:

=cut

sub set_show_ruler {
    my $self = shift;
    $self->{show_ruler} = shift;
}

=head2 function set_show_IL()

  Synopsis:     setter function for the show_IL property
  Parameters:   true or false
  Returns:      nothing
  Side effects: if the current reference map has associated IL information, true will
                cause the IL map to be displayed alongside with the chromosome.
  Status:       implemented
  Example:

=cut

sub set_show_IL {
    my $self = shift;
    $self->{show_IL}=shift;
}

=head2 function get_show_IL()

  Synopsis:     accessor function for the show_IL property
  Parameters:   none
  Returns:      true or false
  Side effects: none
  Status:       implemented
  Example:

=cut

sub get_show_IL {
    my $self = shift;
    if (!exists($self->{show_IL})) { $self->{show_IL}=0; }
    return $self ->{show_IL};
}

=head2 function set_show_physical()

  Synopsis:     true causes the physical map to be displayed if the current reference map 
                has an associated physical map
  Parameters:   true/false
  Returns:      nothing
  Side effects:       
  Status:       implemented
  Example:

=cut

sub set_show_physical {
    my $self = shift;
    $self->{show_physical}=shift;
}

=head2 function get_show_physical()

  Synopsis:     true causes the physical map to be displayed if the current reference map 
                has an associated physical map
  Parameters:   none
  Returns:      true/false
  Side effects: 
  Status:       implemented
  Example:

=cut

sub get_show_physical {
    my $self = shift;
    if (!exists($self->{show_physical})) { $self->{show_physical}=0; }
    return $self->{show_physical};
}

=head2 accessors set_show_offsets(), get_show_offsets()

  Property:	if the offsets should be shown (each marker will display a
                label opposite of the marker label, showing the offset in map
	        units for that marker, for the zoomed-in section 
  Side Effects:	
  Description:	

=cut

sub get_show_offsets { 
    my $self=shift;
    return $self->{show_offsets};
}

sub set_show_offsets { 
    my $self=shift;
    $self->{show_offsets}=shift;
}




=head2 function get_size()

  Synopsis:     accessor function for the size property 
  Parameters:   none
  Returns:      "small" or "normal" or "large"
  Side effects: 
  Status:       implemented
  Example:

=cut

sub get_size {
    my $self = shift;
    if (!exists($self->{size})) { $self->{size}=0; }
    return $self->{size};
}

=head2 function set_size()

  Synopsis:     sets the size of the image 
  Parameters:   string ("normal", "small" and "large" are currently supported).
  Returns:      nothing
  Side effects: "smaller" causes the entire map image to be rendered smaller 
                          (ideal for a laptop monitor) 
                "normal" causes the entire map image to be rendered to fit a desktop monitor 
                (>=17\") 
                "larger" for really large monitors (>20\")
  Status:       implemented
  Example:

=cut

sub set_size {
    my $self = shift;
    $self->{size}=shift;
}

=head2 function set_hilite()

  Synopsis:     hilites the specified markers on the reference map (unhides if necessary) 
                on the zoomed-in map and on the comparison map.
  Parameters:   a string, containing an enumeration of marker names to be hilited, separated 
                by spaces (although other delimiters will also work such as comma, semicolons, 
                etc.)
  Returns:      nothing
  Side effects: the hilited marker name will appear with a yellow background.
  Status:       implemented
  Example:

=cut

sub set_hilite { 
    my $self = shift;
    my $hilite = shift;
    $hilite =~ tr/\,\.\:\;\// /;
    $hilite =~ s/\s+/ /;
    $self->{hilite} = $hilite;
   
}

=head2 function get_hilite()

  Synopsis:     accessor function for the hilite property
  Parameters:   none
  Returns:      the name of the currently hilited marker
  Side effects:       
  Status:       implemented
  Example:

=cut

sub get_hilite {
    my $self = shift;
    if (!exists($self->{hilite})) { $self->{hilite}=""; }
    return $self->{hilite};
}

=head2 function set_confidence()

  Synopsis:     sets the minimal confidence level to be displayed
  Parameters:   confidence level (-1, 0..3)
                -1: uncalculated confidence, 0 - interval marker ... 3 - frame marker
  Returns:      nothing
  Side effects: markers below the specified confidence level will be hidden
  Status:       implemented
  Example:

=cut

sub set_confidence {
    my $self = shift;
    my $confidence = shift;
    $confidence =~ s/[A-Za-z]//g;
    if ($confidence eq "" || $confidence == undef ) { $confidence =-2; }
    $confidence = $confidence +0;
    $self->{confidence} = $confidence;
}

=head2 function get_confidence()

  Synopsis:     accessor function for the confidence property
  Parameters:   none
  Returns:      the current lowest confidence level that is displayed
                Normal values for the confidence property are:
                -1: not calculated
                0 ILOD
                1 ILOD2
                2 CFLOD
                3 LOD3
                If the confidence property is not set, it will return -2, 
                causing all markers to be displayed. 
  Side effects: markers with a lower confidence value (see list above) won\'t be 
                displayed.      
  Status:       implemented
  Example:

=cut 

sub get_confidence {
    my $self = shift;
    if (!exists($self->{confidence})) { $self->{confidence}=-2; }
    return $self->{confidence};
}


=head2 functions set_display_marker_type(), get_display_marker_type()

  Synopsis:	$self->set_display_marker_type('COS');
  Arguments:	a marker type. Any of COS, RFLP, ...
  Returns:	nothing
  Side effects:	Will also set $self->{error} to indicate to the
                user that marker type subsets are shown.
  Description:	if set_display_marker_type is called with a marker
                type argument, only that marker type will be shown
                on the viewer. If called with undef, shows all markers.

=cut

sub set_display_marker_type {
    my $self = shift;
    my $type = shift;
    if ($type && ("RFLP CAPS COS SSR"=~ /\b$type\b/)) {
	$self->{display_marker_type}=$type;
	$self->append_error("Only markers of the type $self->{display_marker_type} are shown on the zoomed map.<br />");
    }
}

sub get_display_marker_type { 
    my $self = shift;
    if (!exists($self->{display_marker_type})) { $self->{display_marker_type}=""; }
    return $self->{display_marker_type};
}


=head2 function set_show_zoomed()

  Synopsis:     setter function for the show_zoomed property 
  Parameters:   show_zoomed property (0 or 1) 
  Returns:      status of the current show_zoomed property (0 or 1)
  Side effects: 0 will cause the zoomed in chromosome section not to be drawn
                1 will cause a zoomed in chromosome section to be drawn
  Status:       implemented
  Example:

=cut

sub set_show_zoomed {
    my $self = shift;
    $self->{show_zoomed} = shift;
}


=head2 function get_show_zoomed()

  Synopsis:     accessor function for the show_zoomed property 
  Parameters:   none
  Returns:      status of the current show_zoomed property (0 or 1)
  Side effects: none
  Status:       implemented
  Example:

=cut


sub get_show_zoomed {
    my $self = shift;
    if (!exists($self->{show_zoomed})) { $self->{show_zoomed}=0; }
    return $self->{show_zoomed};
}

=head2 accessors get_hilite_zoomed(), set_hilite_zoomed()

 Usage:        $chr_viewer->set_hilite_zoomed($cM_start, $cM_end)
 Desc:         hilites the given region in the zoomed-in section,
               using the current hilite color.
 Ret:          The getter returns the start and end in cM
 Args:         the start in cM [real], the end in cM [real]
 Side Effects: hilites the corresponding region
  Notes:       the intended use for this is to hilite sections,
               such as the boundaries for ILs on the zoomed in
               chromosome.

=cut

sub set_hilite_zoomed {
    my $self= shift;
    $self->{hilite_zoom_start}= shift;
    $self->{hilite_zoom_end} = shift;


}

sub get_hilite_zoomed {
    my $self = shift;
    return ($self->{hilite_zoom_start}, $self->{hilite_zoom_end});
}

=head2 function get_color_model()

  Synopsis: 
  Parameters:   name of color model (currently, confidence and marker_type are supported)
  Returns:      nothing
  Side effects: sets the color model property to the specified color model
  Status:       implemented
  Example:

=cut


sub set_color_model {
    my $self = shift;
    $self->{color_model} = shift;
}

=head2 function get_color_model()

  Synopsis: 
  Parameters:   none
  Returns:      the name of the current marker color model
  Side effects: none
  Status:       implemented
  Example:

=cut

sub get_color_model {
    my $self = shift;
    if (!exists($self->{color_model})) { $self->{color_model}=""; }
    return $self->{color_model};
}


=head2 function get_color_legend()

  Synopsis: 
  Parameters:   none
  Returns:      a string containing html code for the marker color legend 
  Side effects: none
  Status:       implemented
  Example:

=cut

sub get_color_legend {
    my $self= shift;
    my $string = "";
    my $link = "view_chromosome.pl?map_version_id=".$self->get_map_version_id()."&amp;chr_nr=".$self->get_ref_chr()."&amp;show_physical=".$self->get_show_physical."&amp;show_IL=".$self->get_show_IL()."&amp;show_offsets=".$self->get_show_offsets()."&amp;show_ruler=".$self->get_show_ruler()."&amp;color_model=".$self->get_color_model()."&amp;comp_map_version_id=".$self->get_comp_map_version_id()."&amp;comp_chr=".$self->get_comp_chr()."&amp;zoom=".$self->get_zoom()."&amp;size=".$self->get_size()."&amp;cM=".$self->get_cM()."&amp;cM_start=".$self->get_cM_start()."&amp;cM_end=".$self->get_cM_end()."&amp;hilite=".$self->get_hilite()."&amp;show_zoomed=".$self->get_show_zoomed()."";
    if ($self->{color_model} eq "marker_types") {

	

	$string = "<b>Marker color by type:</b> 
                   <a href=\"$link\&marker_type=RFLP\" style=\"color:#FF0000\">RFLP</a> | 
                   <a href=\"$link\&marker_type=SSR\" style=\"color:#00FF00\">SSR</a> | 
                   <a href=\"$link\&marker_type=CAPS\" style=\"color:#0000FF\">CAPS</a> | 
                   <a href=\"$link\&marker_type=COS\" style=\"color:#FF00FF\">COS</a> | 
                   <font color=#000000>other</font>
	                   [<a href=\"$link\&marker_type=\" style=\"color:#111111\">show all</a>]";
    
    }
    else {
	$string = "<b>Marker color by LOD score:</b> 
                   <a href=\"$link\&amp;confidence=3\" style=\"color:#FF0000\">F(LOD3)</a> |
                   <a href=\"$link\&amp;confidence=2\" style=\"color:#00FF00\">CF(LOD>=3</a> | 
                   <a href=\"$link\&amp;confidence=1\" style=\"color:#0000FF\">I(LOD2)</a> | 
                   <a href=\"$link\&amp;confidence=0\" style=\"color:#000000\">I(LOD&lt;2)</a> |
                   <a href=\"$link\&amp;confidence=-2\" style=\"color:#777777\">uncalculated</a>  ";
    }
    return $string;
}

=head2 function get_marker_map_links()

  Synopsis:     
  Parameters:   none
  Returns:      a string with html code for the marker map links pull down menu.
                if there is no appropriate map linked to the reference map,
                a string is returned that says so.
  Side effects: calls the get_chromosome_connections() function of the reference
                map object.
  Status:       implemented
  Example:
  Notes:
  Version:

=cut

sub get_marker_map_links {
    my $self=shift;
    #print STDERR "get_marker_map_links...\n";
    # query the database for maps and chromosome that any of the markers of the current chromosome lie on.
    #
    my $chr_nr = $self->get_ref_chr();
    my $F2_2000 = CXGN::Cview::Map::SGN::Genetic->new($self->get_dbh(), CXGN::Cview::Map::Tools::find_current_version( $self->get_dbh(), CXGN::Cview::Map::Tools::current_tomato_map_id()));

    my $F2_2000_version_id = $F2_2000->get_id();

    my $form="<form style=\"margin-bottom:0\" action=\"/cview/view_chromosome.pl\">
	<input type=\"hidden\" name=\"chr_nr\" value=\"".($self->get_ref_chr())."\" />
	<input type=\"hidden\" name=\"map_version_id\" value=\"".($self->get_map_version_id())."\" />
	<input type=\"hidden\" name=\"zoom\" value=\"".($self->get_zoom())."\" />
	<input type=\"hidden\" name=\"show_ruler\" value=\"".($self->get_show_ruler())."\" />
	<input type=\"hidden\" name=\"show_IL\" value=\"".($self->get_show_IL())."\" />
        <input type=\"hidden\" name=\"show_offsets\" value=\"".($self->get_show_offsets())."\" />
        <input type=\"hidden\" name=\"cM_start\" value=\"".($self->get_cM_start())."\" />
        <input type=\"hidden\" name=\"cM_end\" value=\"".($self->get_cM_end())."\" />
	<input  type=\"hidden\" name=\"show_physical\" value=\"".($self->get_show_physical())."\" />
	<input type=\"hidden\" name=\"color_model\" value=\"".($self->get_color_model())."\" />
        <input type=\"hidden\" name=\"size\" value=\"".($self->get_size())."\" />
        <input type=\"hidden\" name=\"show_zoomed\" value=\"".($self->get_show_zoomed())."\" />
        <input type=\"hidden\" name=\"hilite\" value=\"".($self->get_hilite())."\" />
        <input type=\"hidden\" name=\"marker_type\" value=\"".($self->get_display_marker_type())."\" /> ";
 
    my @options = $self->get_ref_map()->get_chromosome_connections($self->get_ref_chr());
    
    if (@options) { 
        
	$form .= "<select name=\"map_chr_select\">";
	foreach my $o (@options) { 
#	print STDERR $o->{map_version_id}, $o->{chr_nr}, $o->{short_name}."<br />\n";
	    my $selected = "";
	    if ($o->{map_version_id} == $self->get_comp_map_version_id()) { 
		$selected = "selected=\"selected\""; 
	    }
	    
	    $form .= qq {  <option value="$o->{map_version_id} $o->{lg_name}" $selected>Map $o->{short_name} Chromosome $o->{lg_name} ($o->{marker_count} markers)</option> };
	}
	
	$form .="</select>\n";
	$self->{compare_disabled} = ""; 
    }
    else {
	$form .= "<select name=\"map_chr_select\" disabled=\"disabled\" >";
	$form .= "<option value=\"\" disabld=\"disabled\" >No maps to compare to</option>";
	$form .= "</select>\n";
	$self->{compare_disabled} = qq{ disabled="disabled" }; 
    }
		     
    $form .= "<input type=\"submit\" value=\"Compare\" $self->{compare_disabled} /></form>";
    
    return $form;
}

sub append_error { 
    my $self = shift;
    my $append = shift;
    if (!exists($self->{errors})) { $self ->{errors}=""; }
    $self->{errors}.=$append;
}

sub get_errors { 
    my $self = shift;
    return $self->{errors};
}

=head2 function get_preceding_chromosome()

  Synopsis:     gives the name of the chromosome or linkage group preceding the 
                given chromosome 
  Parameters:   chromosome name / linkage group name
  Returns:      the chromosome number or linkage group name preceding this 
                chromosome/linkage group
  Side effects: none
  Status:       implemented
  Example:
  Notes:
  Version:

=cut

sub get_preceding_chromosome { 
    my $self = shift;
    my $chr_nr = shift;
    my $chr_count = scalar( @{$self->{chromo_names}} );
    my $chr_index = 0;
    my $old_chr_index=0;
    #
    # find current chromosome in chromo_names array (a hash would be more elegant...)
    #
    for (my $i=0; $i< (@{$self->{chromo_names}}); $i++) { 
	if (${$self->{chromo_names}}[$i] eq $chr_nr) { 
	    $old_chr_index=$i;
	}
    }
	    
    if ($old_chr_index==0) { $chr_index = $chr_count-1; }
    else { $chr_index = $old_chr_index-1; }
    return ${$self->{chromo_names}}[$chr_index];
}

=head2 function get_next_chromosome()

  Synopsis:     gives the name of the chromosome or linkage group following the given 
                chromosome 
  Parameters:   chromosome name / linkage group name
  Returns:      the chromosome number or linkage group name following this 
                chromosome/linkage group
  Side effects: none
  Status:       implemented
  Example:
  Notes:
  Version:

=cut

sub get_next_chromosome { 
    my $self = shift;
    my $chr_nr = shift;
    my $chr_count = scalar( @{$self->{chromo_names}} );
    my $chr_index = 0;
    my $old_chr_index = 0;
    for (my $i=0; $i< (@{$self->{chromo_names}}); $i++) { 
	if (${$self->{chromo_names}}[$i] eq $chr_nr) { 
	    $old_chr_index=$i;
	}
    }

    if ($old_chr_index == ($chr_count-1)) { $chr_index = 0; }
    else { $chr_index = $old_chr_index+1; }
    return ${$self->{chromo_names}}[$chr_index];
}

sub get_preceding_comp_chromosome { 
    my $self = shift;
    my $chr_nr = shift;
    if (!($self->get_comp_map())) { 
	return "?";
    }
    my $chr_count = scalar( @{$self->{comp_chromo_names}} );
    my $chr_index = 0;
    my $old_chr_index = 0;

    for (my $i=0; $i< (@{$self->{comp_chromo_names}}); $i++) { 
	if (${$self->{comp_chromo_names}}[$i] eq $chr_nr) { 
	    $old_chr_index=$i;
	}
    }

    if ($old_chr_index == 0) { $chr_index = $chr_count-1; }
    else { $chr_index = $old_chr_index-1; }
    return ${$self->{comp_chromo_names}}[$chr_index];
}

sub get_next_comp_chromosome { 
    my $self = shift;
    my $chr_nr = shift;
    if (!($self->get_comp_map())) { 
	return "?";
    }
    else { 
	my $chr_count = scalar( @{$self->{comp_chromo_names}} );
	my $chr_index = 0;
	my $old_chr_index = 0;
	for (my $i=0; $i< (@{$self->{comp_chromo_names}}); $i++) { 
	    if (${$self->{comp_chromo_names}}[$i] eq $chr_nr) { 
		$old_chr_index=$i;
	    }
	}


	if ($old_chr_index == ($chr_count-1)) { $chr_index = 0; }
	else { $chr_index = $old_chr_index+1; }
	return ${$self->{comp_chromo_names}}[$chr_index];
    }
    
}

=head2 function display_toolbar()

  Synopsis:     displays the toolbar by printing html to STDOUT 
  Parameters:   none
  Returns:      nothing
  Side effects: prints html code to STDOUT
  Status:       implemented
  Example:

=cut

sub display_toolbar {
    my $self=shift;
    #$self->{scrolldown} = $self->{cM}+2*$self->{unzoomedheight}/$self->{zoom}/3;
    
    
 
    $self->{scrolldown_start} = $self->get_cM_start() + ($self->{zoom_length} / 2);
    $self->{scrolldown_end}   = $self->get_cM_end() + ($self->{zoom_length} / 2);
    if ($self->{scrolldown_end} > $self->get_ref_chr_len()) {

	$self->{scrolldown_end}= $self->get_ref_chr_len();
	$self->{scrolldown_start} = $self->{scrolldown_end}-$self->{zoom_length};
    }
    #$self->{scrollup}   = $self->{cM}-2*$self->{unzoomedheight}/$self->{zoom}/3;
    $self->{scrollup_start}   = $self->get_cM_start()- ($self->{zoom_length} / 2);
    $self->{scrollup_end}    = $self->get_cM_end() - ($self->{zoom_length} /2);
    if ($self->{scrollup_start}<0) { 
	$self->{scrollup_start}=0;
	$self->{scrollup_end}=$self->{zoom_length};
    }
    
    if ($self->{zoom_length}==0) { die "ZOOM LENGTH IS 0!\n"; }
    #$self->{zoom_in}    = $self->{zoom}+1;
    $self->{zoom_in_start} = $self->get_cM_start() +($self->{zoom_length}/4);
    $self->{zoom_in_end}   = $self->get_cM_end() - ($self->{zoom_length}/4);

    #$self->{zoom_out}   = $self->{zoom}-1;
    $self->{zoom_out_start}   = $self->get_cM_start() - ($self->{zoom_length}/4);
    $self->{zoom_out_end}  = $self->get_cM_end + ($self->{zoom_length}/4);

    if ($self->{zoom_out_end} > $self->get_ref_chr_len()) { 
	$self->{zoom_out_end} = $self->get_ref_chr_len();
	$self->{zoom_out_start} = $self->{zoom_out_end} - $self->{zoom_length};
    }
    
    # set buttons to disabled when no zoomed-in chromosome is displayed.
    if (!$self->{show_zoomed} || !$self->get_ref_map()->can_zoom()) { 
	$self->{zoom_in_disabled}="disabled=\"disabled\"";
	$self->{zoom_out_disabled} = "disabled=\"disabled\"";
	$self->{scroll_up_disabled} = "disabled=\"disabled\"";
	$self->{scroll_down_disabled} = "disabled=\"disabled\"";
    }
    


#    if (!$self->map_has_physical($self->{map_id})) {
    if (!$self->get_ref_map()->has_physical()) { 
	$self->{physical_disabled} = "disabled=\"disabled\"";
    }

    if (!$self->get_ref_map()->has_IL()) {
	$self->{IL_disabled} = qq { disabled="disabled" };
    }
    else { 
	$self->{IL_disabled} = "";
    }

    if ($self->{show_zoomed}) { 
	#$self->{zoom_in_disabled} = "";
	$self->{enable_zoom_text} = "Hide zoomed";
	$self->{enable_zoom_value} = 0;
	$self->{toggle_zoomed_section} = 0;
    }
    else {
	$self->{zoom_in_disabled} = " disabled=\"disabled\" ";
	$self->{enable_zoom_text} = "Show zoomed";
	$self->{enable_zoom_value} =1;
	$self->{toggle_zoomed_section} = 10;
    }
    if (!$self->get_ref_map->can_zoom()) { 
	$self->{zoomed_button_enabled}= " disabled=\"disabled\" ";
    }
   
#    $self->{next_chromosome} = $self->{chr_nr} + 1;
#    if ($self->{next_chromosome} > $self->{max_chr}) { $self->{next_chromosome} = 1; }
  
    $self->{next_chromosome} = $self->get_next_chromosome($self->get_ref_chr());

 #   $self->{preceding_chromosome} = $self->{chr_nr}-1;
 #   if ($self->{preceding_chromosome} == 0)  { $self->{preceding_chromosome} = $self->{max_chr}; }

    $self->{preceding_chromosome} = $self -> get_preceding_chromosome($self->get_ref_chr());

#    $self->{next_comp_chr} = $self->{comp_chr} + 1;
#    if ($self->{next_comp_chr} > $self->{comp_max_chr}) { $self->{next_comp_chr} = 1; }

    $self->{next_comp_chr} = $self->get_next_comp_chromosome($self->get_comp_chr());

 #   $self->{preceding_comp_chr} = $self -> {comp_chr} -1;
 #   if ($self->{preceding_comp_chr} ==0 ) { $self->{preceding_comp_chr} = $self->{comp_max_chr}; }
    $self->{preceding_comp_chr} = $self->get_preceding_comp_chromosome($self->get_comp_chr());


#    $self->{imagemap} =    $self->{map}->get_image_map("imagemap");

    $self->{marker_map_links} = $self->get_marker_map_links();
    
    my $comp_map_caption = "";
    my $chromo_designation = "chr";
    if ($self->get_comp_chr()=~/[A-Za-z]/) { $chromo_designation = "linkage group"; }
    if ($self->get_comp_map_version_id()) { $comp_map_caption = "<td>Comparing to $chromo_designation <b>$self->{comp_chr}</b> of map&nbsp;</td><td bgcolor=\"#9999CC\"><a href=\"/cview/map.pl?map_version_id=$self->{comp_map_version_id}\"><b>$self->{comp_map_name}</b></a>&nbsp;</td>"; }

    # some legends need to know the state of the script...
    $self->get_ref_map()->get_legend()->set_state_hashref($self->get_state_hashref());
    $self->get_ref_map()->get_legend()->set_mode($self->get_color_model());
    my $color_legend = $self->get_ref_map()->get_legend()->get_legend_html();
    my $toggle_ruler= !($self->{show_ruler});
    my $toggle_physical = !($self->{show_physical});
    my $toggle_IL = ! ($self->{show_IL});
    my $toggle_offsets = ! ($self->get_show_offsets());
    
    my $toggle_size_select = qq { <select name="size" > };
    
    my @selected = ();
    if ($self->{size}=~/small/i) {  $selected[0]=qq { selected="1" }; }
    elsif ($self->{size}=~/large/i) {  $selected[2]= qq { selected="1" }; }
    else { $selected[1]= qq { selected="1" }; }
    $toggle_size_select .= qq { <option value="small" $selected[0] >Small</option> };
    $toggle_size_select .= qq { <option value="normal" $selected[1] >Normal</option> };
    $toggle_size_select .= qq { <option value="large" $selected[2] >Large</option> };
    $toggle_size_select .= qq { </select> };

    if (!$self->get_comp_map_version_id()) {
	$self->{hide_comparison} = "disabled=\"disabled\"";
    }

    $self->{maps_select} = CXGN::Cview::Utils::get_maps_select($self->get_dbh(), $self->get_ref_map()->get_id());

    my $view_entire_map_link = "&nbsp;View entire comparative map";
    if ($self->get_comp_map_version_id()) {
	$view_entire_map_link = "&nbsp;<a href=\"/cview/view_maps.pl?center_map_version_id=".($self->get_ref_map()->get_id())."&amp;right_map_version_id=$self->{comp_map_version_id}\">View entire comparative map</a>";
    }
    
    $self->{url_map_name} = $self->{ref_map_name};
    $self->{url_map_name} =~ s/ /\+/g;


    my $show_marker_link = "Show markers between 0 and 0 cM";
    if ($self->{show_zoomed} && $self->get_ref_map()->can_zoom()) { 
	$show_marker_link= "<a href=\"/search/markers/markersearch.pl?
w822_pos_start=".$self->get_cM_start()."&amp;w822_pos_end=".$self->get_cM_end()."&amp;w822_maps=".(CXGN::Cview::Map::Tools::find_map_id_with_version($self->get_dbh(), $self->get_ref_map()->get_id()))."&amp;w822_confs=$self->{confidence}&amp;&amp;w822_submit=Search&amp;w822_chromos=".$self->get_ref_chr()."\"\n>Search markers between ".($self->get_cM_start())." and ".($self->get_cM_end())." ".$self->get_ref_map()->get_units()."</a>";
    }
    $chromo_designation = "chr";
    if ($self->get_ref_chr()=~/[A-Za-z]/) { $chromo_designation = "linkage group"; }

    my $state_hashref = $self->get_state_hashref();
    
    
    my $scroll_up_button = CXGN::Cview::Chromosome_view::toolbar_button -> new("Scroll up", $state_hashref);
    $scroll_up_button -> set_property("cM_start", $self->{scrollup_start});
    $scroll_up_button -> set_property("cM_end", $self->{scrollup_end});
    $scroll_up_button -> set_enabled($self->{scroll_up_disabled});
    my $scroll_up_html = $scroll_up_button -> render_string();
    
    my $scroll_down_button = CXGN::Cview::Chromosome_view::toolbar_button -> new("Scroll down", $state_hashref);
    $scroll_down_button -> set_property("cM_start", $self->{scrolldown_start});
    $scroll_down_button -> set_property("cM_end", $self->{scrolldown_end});
    $scroll_down_button -> set_enabled($self->{scroll_down_disabled});
    my $scroll_down_html = $scroll_down_button -> render_string();
    
    my $zoom_in_button = CXGN::Cview::Chromosome_view::toolbar_button -> new("Zoom in", $state_hashref);
    $zoom_in_button -> set_property("cM_start", $self->{zoom_in_start});
    $zoom_in_button -> set_property("cM_end", $self->{zoom_in_end});
    $zoom_in_button -> set_enabled($self->{zoom_in_disabled});
    my $zoom_in_html = $zoom_in_button -> render_string();


    my $zoom_out_button = CXGN::Cview::Chromosome_view::toolbar_button -> new("Zoom out", $state_hashref);
    $zoom_out_button -> set_property("cM_start", $self->{zoom_out_start});
    $zoom_out_button -> set_property("cM_end", $self->{zoom_out_end});
    $zoom_out_button -> set_enabled($self->{zoom_out_disabled});
    my $zoom_out_html = $zoom_out_button-> render_string();

    my $show_zoomed_button = CXGN::Cview::Chromosome_view::toolbar_button -> new($self->{enable_zoom_text}, $state_hashref);
    $show_zoomed_button->set_enabled($self->{zoomed_button_enabled});
    $show_zoomed_button -> set_property("show_zoomed", $self->{toggle_zoomed_section});

    my $show_zoomed_html = $show_zoomed_button -> render_string();

    my $hide_comparison_button = CXGN::Cview::Chromosome_view::toolbar_button -> new("Hide comparison", $state_hashref);
    $hide_comparison_button -> set_property("comp_map_version_id", 0);
    $hide_comparison_button -> set_property("comp_chr", 0);
    $hide_comparison_button -> set_enabled($self->{hide_comparison});
    my $hide_comparison_html = $hide_comparison_button -> render_string();

    my $switch_chromosomes_button = CXGN::Cview::Chromosome_view::toolbar_button -> new("Switch chromosomes", $state_hashref);
    $switch_chromosomes_button -> set_property("comp_chr", $self->get_ref_chr());
    $switch_chromosomes_button -> set_property("chr_nr", $self->get_comp_chr());
    $switch_chromosomes_button -> set_property("map_version_id", $self->get_comp_map_version_id());
    $switch_chromosomes_button -> set_property("comp_map_version_id", $self->get_map_version_id());
    $switch_chromosomes_button -> set_enabled($self->{hide_comparison});
    my $switch_chromosomes_html = $switch_chromosomes_button -> render_string();

    my $sync_preceding_chr_button = CXGN::Cview::Chromosome_view::toolbar_button->new("&lt;&lt;", $state_hashref);
    $sync_preceding_chr_button ->set_property("chr_nr", $self->{preceding_chromosome});
    $sync_preceding_chr_button ->set_property("comp_chr", $self->{preceding_comp_chr});
    $sync_preceding_chr_button ->set_enabled($self->{hide_comparison});
    my $sync_preceding_chr_html = $sync_preceding_chr_button->render_string();

    my $sync_next_chr_button  = CXGN::Cview::Chromosome_view::toolbar_button->new("&gt;&gt;", $state_hashref);
    $sync_next_chr_button ->set_property("chr_nr", $self->{next_chromosome});
    $sync_next_chr_button ->set_property("comp_chr", $self->{next_comp_chr});
    $sync_next_chr_button ->set_enabled($self->{hide_comparison});
    my $sync_next_chr_html = $sync_next_chr_button->render_string();

    my $previous_chr_button = CXGN::Cview::Chromosome_view::toolbar_button -> new($self->{preceding_chromosome}."&lt;", $state_hashref);
    $previous_chr_button -> set_property("chr_nr", $self->{preceding_chromosome});
    my $previous_chr_html = $previous_chr_button -> render_string();
    
    my $next_chr_button = CXGN::Cview::Chromosome_view::toolbar_button -> new("&gt;".$self->{next_chromosome}, $state_hashref);
    $next_chr_button -> set_property("chr_nr", $self->{next_chromosome});
    my $next_chr_html = $next_chr_button -> render_string();

    my $preceding_comp_chr_button = CXGN::Cview::Chromosome_view::toolbar_button -> new($self->{preceding_comp_chr}."&lt;", $state_hashref);
    $preceding_comp_chr_button -> set_property("comp_chr", $self->{preceding_comp_chr});
    $preceding_comp_chr_button -> set_enabled($self->{hide_comparison});
    my $preceding_comp_chr_html = $preceding_comp_chr_button -> render_string();

    my $next_comp_chr_button = CXGN::Cview::Chromosome_view::toolbar_button -> new("&gt;".$self->{next_comp_chr}, $state_hashref);
    $next_comp_chr_button -> set_property("comp_chr", $self->{next_comp_chr});
    $next_comp_chr_button -> set_enabled($self->{hide_comparison});
    my $next_comp_chr_html = $next_comp_chr_button -> render_string();

    my $ruler_button = CXGN::Cview::Chromosome_view::toolbar_button -> new("Ruler", $state_hashref);
    $ruler_button -> set_property("show_ruler", $toggle_ruler);
    my $ruler_html = $ruler_button->render_string();

    my $physical_map_button = CXGN::Cview::Chromosome_view::toolbar_button -> new("Physical map", $state_hashref);
    $physical_map_button -> set_property("show_physical", $toggle_physical);
    $physical_map_button -> set_enabled($self->{physical_disabled});
    my $physical_map_html = $physical_map_button -> render_string();

    my $IL_button = CXGN::Cview::Chromosome_view::toolbar_button->new("IL", $state_hashref);
    $IL_button -> set_property("show_IL", $toggle_IL);
    $IL_button -> set_enabled($self->{IL_disabled});
    my $IL_html = $IL_button -> render_string();

    my $offset_button = CXGN::Cview::Chromosome_view::toolbar_button->new("Offsets", $state_hashref);
    $offset_button -> set_property("show_offsets", $toggle_offsets);
    $offset_button -> set_enabled($self->{zoom_button_enabled});
    my $offset_html = $offset_button-> render_string();

#    my $size_button = CXGN::Cview::Chromosome_view::toolbar_button -> new($size_button_text, $state_hashref);
#    $size_button -> set_property("size", $toggle_size);
#    my $size_html = $size_button -> render_string();

    my $errors = $self->get_errors();

    my $chr_nr = $self->get_ref_chr();
    my $map_version_id = $self->get_map_version_id();
    my $map_name = $self->get_ref_map()->get_short_name();
    my $zoom = $self->get_zoom();
    my $cM   = $self->get_cM();
    my $show_ruler = $self->get_show_ruler();
    my $show_IL = $self->get_show_IL();
    my $show_offsets = $self->get_show_offsets();
    my $comp_map_version_id= $self ->get_comp_map_version_id();
    my $comp_chr= $self->get_comp_chr();
    my $color_model = $self->get_color_model();
    my $show_physical = $self->get_show_physical();
    my $size = $self->get_size();
    my $show_zoomed = $self->get_show_zoomed();
    my $confidence = $self->get_confidence();
    my $hilite = $self->get_hilite();
    my $display_marker_type = $self->get_display_marker_type();
    my $cM_start = $self->get_cM_start();
    my $cM_end = $self->get_cM_end();

    my $zoom_range_html = qq { 
	<form style="margin-bottom:0" >
	    <input type="hidden" name="map_version_id" value="$map_version_id" />
	    <input type="hidden" name="chr_nr" value="$chr_nr" size="2" />
	    <input type="hidden" name="show_ruler" value="$show_ruler" />
	    <input type="hidden" name="show_IL" value="$show_IL" />
	    <input type="hidden" name="show_offsets" value="$show_offsets" />
	    <input type="hidden" name="comp_map_version_id" value="$comp_map_version_id" />
	    <input type="hidden" name="comp_chr" value="$comp_chr" />
	    <input type="hidden" name="color_model" value="$color_model" />
	    <input type="hidden" name="show_physical" value="$show_physical" />
	    <input type="hidden" name="size" value="$size" />
	    <input type="hidden" name="show_zoomed" value="1" />
	    <input type="hidden" name="confidence" value="$confidence" />
	    <input type="hidden" name="hilite" value="$hilite" />
	    <input type="hidden" name="marker_type" value="$display_marker_type" />
       
	    <b>zoom range:</b> <input name="cM_start" size="3" value="$cM_start" /> to <input name="cM_end" size="3" value="$cM_end" />
	    <input type="submit" value="show" />
	    </form> 
	};


    print <<BUTTONS;    

    $errors


    <table summary="" cellpadding="0" cellspacing="0"><tr><td>Viewing $chromo_designation <b>$chr_nr</b> of map &nbsp;</td><td bgcolor="#CC9999"><a href=\"/cview/map.pl?map_version_id=$map_version_id\"><b>$map_name</b></a></td><td>&nbsp;</td>
	$comp_map_caption
	<td>&nbsp;&nbsp;[<a href="/help/cview.pl">Help</a>]</td>
	</tr></table>
        
	<table summary="" cellpadding="0" cellspacing="0"><tr>
	<td>
	
	$self->{image_html}

        </td></tr></table>
	
	    $color_legend


<table summary="" cellpadding="0" cellspacing="0"><tr><td>

$scroll_up_html
    
    
    </td><td>

    $scroll_down_html
    
    </td><td>

    $zoom_in_html
    
    
    </td><td>

    
    $zoom_out_html

    
    </td>

    <td>|</td><td>

    $show_zoomed_html

    
    </td>

    <td width="10">&nbsp;</td><td>
  
    $zoom_range_html
    <!-- $show_marker_link -->

    </td>

    </tr></table>

	<table summary="" cellpadding="0" cellspacing="0" border="0">
	<tr><td valign="middle" width="120"><b>Compare map to:</b>&nbsp;</td><td valign="middle">$self->{marker_map_links}</td></tr>
	</table>
	
	<table summary="" cellpadding="0" cellspacing="0">

	<tr><td width="120">&nbsp;</td><td>

	$hide_comparison_html

	
</td>
<td>

        $switch_chromosomes_html 

	
	</td>



	<td>
	$view_entire_map_link

</td>

	</tr></table>

        <table summary=""><tr><td>

	 <form style="margin-bottom:0"  action="/cview/view_chromosome.pl">

	 <table summary="" cellpadding="0" border="0" cellspacing="0">
	 <tr valign="middle"><td valign="middle" width="120">
	 <b>Jump to map:</b></td><td>$self->{maps_select}</td><td valign="middle">&nbsp;chr&nbsp;</td><td>
         <input type="text" name="chr_nr" value="$chr_nr" size="2" />
	 <input type="hidden" name="zoom" value="$zoom" />
	 <!-- <input type="hidden" name="cM" value="$cM" /> -->
	<input type="hidden" name="cM_start" value="$cM_start" />
	<input type="hidden" name="cM_end" value="$cM_end" />
	 <input type="hidden" name="show_ruler" value="$show_ruler" />
	 <input type="hidden" name="show_IL" value="$show_IL" />
	 <input type="hidden" name="show_offsets" value="$show_offsets" />
	 <input type="hidden" name="comp_map_version_id" value="$comp_map_version_id" />
	 <input type="hidden" name="comp_chr" value="$comp_chr" />
	 <input type="hidden" name="color_model" value="$color_model" />
	 <input type="hidden" name="show_physical" value="$show_physical" />
	 <input type="hidden" name="size" value="$size" />
	 <input type="hidden" name="show_zoomed" value="$show_zoomed" />
	 <input type="hidden" name="confidence" value="$confidence" />
	 <input type="hidden" name="hilite" value="$hilite" />
	 <input type="hidden" name="marker_type" value="$display_marker_type" />
	 <input type="submit" value="Jump" />
	 </td>
         </tr>
         </table>
         </form>
         </td>
    	 
         <td width="20">&nbsp;</td>
	 
         <td>
	<form  style="margin-bottom:0" action="/cview/view_chromosome.pl">
        <b>Highlight marker:</b>
        <input type="text" name="hilite" value="$hilite" size="5" />
	<input type="submit" value="Highlight" />
	<input type="hidden" name="zoom" value="$zoom" />
	<!-- <input type="hidden" name="cM" value="$cM" /> -->
	<input type="hidden" name="cM_start" value="$cM_start" />
	<input type="hidden" name="cM_end" value="$cM_end" />
	<input type="hidden" name="chr_nr" value="$chr_nr" />
	<input type="hidden" name="map_version_id" value="$map_version_id" />
	<input type="hidden" name="show_ruler" value="$show_ruler" />
	<input type="hidden" name="show_IL" value="$show_IL" />
	<input type="hidden" name="show_offsets" value="$show_offsets" />
	<input type="hidden" name="comp_map_version_id" value="$comp_map_version_id" />
	<input type="hidden" name="comp_chr" value="$comp_chr" />
	<input type="hidden" name="color_model" value="$color_model" />
	<input type="hidden" name="show_zoomed" value="$show_zoomed" />
	<input type="hidden" name="confidence" value="$confidence" />
	<input type="hidden" name="show_physical" value="$show_physical" />
	<input type="hidden" name="size" value="$size" />
	<input type="hidden" name="marker_type" value="$display_marker_type" />
	</form>
	</td>


</tr>
	</table>
    
	
	
  
    <table summary="" cellpadding="0" cellspacing="0" border="0"><tr>
    <td width="120">&nbsp;</td>
    <td colspan="3" align="center"><b>Reference chromosome</b></td>
    <td width="20">&nbsp;</td>
    <td colspan="3" align="center"><b>Comparison chromosome</b></td>
    </tr>
    <tr>
    <td width="120">&nbsp;</td>
    <td align="right">

    <table summary="" cellpadding="0" cellspacing="0" border="0"><tr><td>
    $sync_preceding_chr_html
    </td><td>
    $previous_chr_html
    </td></tr></table>
    
    </td>
    <td align="center" valign="middle">

BUTTONS

    unless($chr_nr ne "") {$chr_nr ="&nbsp;";}


print <<BUTTONS; 

    &nbsp;<b>$chr_nr</b>&nbsp; </td>
    <td>
    
    $next_chr_html

	
</td>
<td width="20">&nbsp;</td>
<td align="right">
$preceding_comp_chr_html 

    
    </td>
    <td align="center" valign="middle">


BUTTONS

    unless($comp_chr ne "") {$comp_chr ="&nbsp;";}


print <<BUTTONS; 

    &nbsp;<b>$comp_chr</b>&nbsp;</td>
    <td>

    <table summary="" cellpadding="0" cellspacing="0" border="0"><tr><td>
    $next_comp_chr_html
    </td><td>
    $sync_next_chr_html
    </td></tr></table>

</td>
	
	</tr></table>

	<table summary="" cellpadding="0" cellspacing="0">
	<tr><td valign="middle" width="120">
	<b>Show/hide:</b></td>
	<td>
	
	$ruler_html	
	
	</td>
	<td>
	$offset_html
	</td>



<td>
	
	$physical_map_html
	
	</td>

	<td>

	$IL_html
	
	
	</td>


	<td width="30">&nbsp;</td>
	<td valign="middle">&nbsp;<b>image size: </b> </td><td>

	<form  style="margin-bottom:0" action="/cview/view_chromosome.pl">
	$toggle_size_select 
	<input type="submit" value="change" />
	<input type="hidden" name="zoom" value="$zoom" />
	<input type="hidden" name="cM_start" value="$cM_start" />
	<input type="hidden" name="cM_end" value="$cM_end" />
	<input type="hidden" name="chr_nr" value="$chr_nr" />
	<input type="hidden" name="map_version_id" value="$map_version_id" />
	<input type="hidden" name="show_ruler" value="$show_ruler" />
	<input type="hidden" name="show_IL" value="$show_IL" />
	<input type="hidden" name="show_offsets" value="$show_offsets" />
	<input type="hidden" name="comp_map_version_id" value="$comp_map_version_id" />
	<input type="hidden" name="comp_chr" value="$comp_chr" />
	<input type="hidden" name="color_model" value="$color_model" />
	<input type="hidden" name="show_zoomed" value="$show_zoomed" />
	<input type="hidden" name="confidence" value="$confidence" />
	<input type="hidden" name="show_physical" value="$show_physical" />
	<input type="hidden" name="marker_type" value="$display_marker_type" />
	</form>
	
	


	</td>
</tr></table>

BUTTONS


}

sub clean_up {
    my $self = shift;
}


=head2 accessors set_state_hashref(), get_state_hashref()

  Property:	the state_hashref is a hash describing the current
                state of the Chromosome_viewer, essentially collecting
                all the processed page arguments.
  Args/Ret:     a hash reference
  Side Effects:	the state_hashref determines what the toolbar buttons
                and links constructed on the page will contain as 
                parameters.

=cut

sub get_state_hashref { 
    my $self=shift;
    return $self->{state_hashref};
}

sub set_state_hashref { 
    my $self=shift;
    $self->{state_hashref}=shift;
}


=head2 accessors set_force(), get_force()

  Property:	force - regenerate cached files whatever the 
                status of the cache
  Args/Ret      true for re-generation, false for letting cache
                decide when to re-generate the images.
  Side Effects:	true will force regenerate all associated files
  Description:	

=cut

sub get_force { 
    my $self=shift;
    if (!exists($self->{force}) || !defined($self->{force})) {
	$self->{force}="";
    }
    return $self->{force};
}

sub set_force { 
    my $self=shift;
    $self->{force}=shift;
}


=head2 get_temp_dir

 Usage:
 Desc:
 Ret:
 Args:
 Side Effects:
 Example:

=cut

sub get_temp_dir {
  my $self=shift;
  if (!exists($self->{temp_dir})) { 
      die "Chromosome_viewer: need a temp_dir  for storing images... STOP!\n";
  }

  return $self->{temp_dir};

}

=head2 set_temp_dir

 Usage:
 Desc:
 Ret:
 Args:
 Side Effects:
 Example:

=cut

sub set_temp_dir {
  my $self=shift;
  $self->{temp_dir}=shift;
}

=head2 get_basedir

 Usage:
 Desc:
 Ret:
 Args:
 Side Effects:
 Example:

=cut

sub get_basedir {
  my $self=shift;
  if (!exists($self->{basedir})) { 
      die "Chromosome_viewer: need a basedir for storing images... STOP!\n";
  }
  return $self->{basedir};

}

=head2 set_basedir

 Usage:
 Desc:
 Ret:
 Args:
 Side Effects:
 Example:

=cut

sub set_basedir {
  my $self=shift;
  $self->{basedir}=shift;
}

=head2 accessors get_db_backend, set_db_backend

 Usage:        $v ->set_db_backend("cxgn");
 Desc:         sets the db backend of the comparative viewer.
               following values are allowed:
               o cxgn - the cxgn database
               o cmap - the cmap database
               o cxgn_and_cmap - both databases are queried for maps.
 Property      a string describing the database backend to be used.
 Side Effects: the specified backend will be used

=cut

sub get_db_backend {
  my $self = shift;
  return $self->{db_backend}; 
}

sub set_db_backend {
  my $self = shift;
  $self->{db_backend} = shift;
}





package CXGN::Cview::Chromosome_view::toolbar_button;

sub new { 
    my $class = shift;
    my $args = {};
    my $self = bless $args, $class;

    my $name = shift;

    my $properties_hashref = shift;

    $self->set_name($name);

    %{$self->{properties}} = ( 'chr_nr' => "",
			       'map_version_id' => "",
			       'zoom'   => "",
			       'show_ruler' => "",
			       'show_IL' => "",
			       'show_offsets'=> "",
                               'comp_map_version_id' => "",
			       'comp_chr' => "",
			       'color_model' => "",
			       'show_zoomed' => "",
			       'show_physical' => "",
			       'confidence' => "",
			       'size'=> "",
			       'hilite' => "",
			       'marker_type' => "",
			       'cM_start' => "",
			       'cM_end' => "",
			       'cM' => "",
			       'clicked' => "",
			   );

    foreach my $k (keys(%$properties_hashref)) { 
	if (exists(${$self->{properties}}{$k})) { 
	    ${$self->{properties}}{$k}=$$properties_hashref{$k};
	}
	else { print STDERR "property $k is not supported in toolbar_button package.\n"; }
    }
    return $self;
}

sub set_name { 
    my $self = shift;
    $self->{name}=shift;
}

sub get_name { 
    my $self = shift;
    return $self->{name};
}

sub set_action { 
    my $self = shift;
    $self->{action} = shift;
}

sub get_action { 
    my $self =shift;
    if (!exists($self->{action})) { $self->{action}=""; }
    return $self->{action};
}

sub set_enabled {
    # parameter: true or false setting to enabled or disabled
    #
    my $self = shift;
    $self->{enabled} = shift;
}

sub is_enabled { 
    my $self = shift;
    return $self->{enabled};
}

sub set_property { 
    my $self = shift;
    my $property = shift;
    my $value = shift;
    if (!$value) { $value=""; }
    if (!exists(${$self->{properties}}{$property})) { 
	print STDERR "Warning: toolbar_button: property $property does not exist!\n";
	return 0;
    }
    else { 
	${$self->{properties}}{$property}=$value;
	return 1;
    }
}

sub render_string { 
    my $self = shift;
    
    my $action = $self->get_action();

    if ($action eq "") {
$action = "#"
}
    my $s = "<form style=\"margin-bottom:0\" action=\"$action\">\n";

    foreach my $p (keys %{$self->{properties}}) { 
	#print STDERR "Printing toolbar button: hidden field: $p, $self->{properties}{$p}\n";
	if (exists($self->{properties}{$p}) && $self->{properties}{$p}) { 
	    $s .= "<input type=\"hidden\" name=\"$p\" value=\"$self->{properties}{$p}\" />\n"; 
	}
	
    }

    my $disabled;
    if ($self->is_enabled()) { 
	$disabled = "disabled=\"disabled\"";
    }
    else {
	$disabled="";
    }
    $s .="<input type=\"submit\" value=\"".$self->get_name()."\" $disabled />\n";
    $s .="</form>\n";
    return $s;
}

sub render { 
    my $self=shift;
    print $self->render_string();
}


# <FORM style="margin-bottom:0" action=/cview/view_chromosome.pl>
# 	<INPUT TYPE=hidden NAME=chr_nr VALUE="$self->{chr_nr}" />
# 	<INPUT TYPE=hidden NAME=map_id VALUE="$self->{map_id}" />
# 	<INPUT TYPE=hidden NAME=zoom VALUE="$self->{zoom}" />
# 	<INPUT TYPE=hidden NAME=cM VALUE="$self->{cM}" />
# 	<INPUT TYPE=hidden NAME=show_ruler VALUE="$self->{show_ruler}" />
# 	<INPUT TYPE=hidden NAME=show_IL VALUE="$self->{IL}" />
# 	<INPUT TYPE=hidden NAME=comp_map VALUE="$self->{comp_map}" />
# 	<INPUT TYPE=hidden NAME=comp_chr VALUE="$self->{comp_chr}" />
# 	<INPUT TYPE=hidden NAME=color_model VALUE="$self->{color_model}" />
# 	<INPUT TYPE=hidden NAME=show_zoomed VALUE="$self->{show_zoomed}" />
# 	<INPUT TYPE=hidden NAME=show_physical VALUE="$self->{show_physical}" />
# 	<INPUT TYPE=hidden NAME=confidence VALUE="$self->{confidence}" />
# 	<INPUT TYPE=hidden NAME=size VALUE="$toggle_size" />
# 	<INPUT TYPE=hidden NAME=hilite VALUE="$self->{hilite}" />
# 	<INPUT TYPE=submit VALUE="$size_button" />
# 	</FORM>
