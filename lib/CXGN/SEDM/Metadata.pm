
=head1 NAME

CXGN::SEDM::Metadata - a class to create and manipulate the database metadata.

Version:1.0

=head1 DESCRIPTION

 This class create and manipulate a database metadata. 

 A metadata is a data about data from tha database, so it describe when, who and why create or modify some data 
(create_data, create_person_id, modify_date, modify_person_id, modification_note) and if it is obsolete and why 
(obsolete and obsolete_note). Also store if exists a previous metadata_id (previous_metadata_id) to be capable 
to trace the history of a data changes.

 For example:
 +-------------+-------------+------------------+-------------+------------------+-------------------+----------------------+
 | metadata_id | create_date | create_person_id | modify_date | modify_person_id | modification_note | previous_metadata_id |
 +-------------+-------------+------------------+-------------+------------------+-------------------+----------------------+
 | 1           | day-1       | 1                |             |                  |                   |                      | ## Action1
 | 2           | day-1       | 1                | day-2       | 1                | set_datatype_A    | 1                    | ## Action2
 | 3           | day-1       | 1                | day-3       | 1                | set_datatype_B    | 1                    | ## Action3
 | 4           | day-1       | 1                | day-3       | 1                | set_datatype_B    | 2                    | ## Action3
 +-------------+-------------+------------------+-------------+------------------+-------------------+----------------------+

 ## Action1: Insert 100 new data with datatype_A and datatype_B. (They will have metadata_id=1)
 ## Action2: Update 20 data, setting the datatype_A. (They will have metadata_id=2)
 ## Action3: Update 40 data, setting the datatype_B (10 of them are the same that were updated in the action2).
    (30 of these data will have metadata_id=3 and the rest, metadata_id=4).
 
 In this example if you get the history for one of the 10 data that was updated two times, you will have:
    @metadata_history=@{metadata->trace_history($metadata_id)};
    @metadata_history=($metadata_row4_aref, $metadata_row2_aref, $metadata_row1_aref);
    @metadata_row4=(4, day-1, 1, day-3, 1, set_datatype_B, 2, 0, undef);
    @metadata_row2=(2, day-1, 1, day-2, 1, set_datatype_A, 1, 0, undef);
    @metadata_row1=(1, day-1, 1, undef, undef, undef, undef, 0, undef);

 The metadata_history array will be composed as many elements as metadata_id have this element. Each element will be a array reference
 of a array with nine elements. If there aren't some data for one field, it will appears as 'undef'.

 So what is a metadata object? 

   A metadata_object is an object that store two database objects using the DBIx::Class: 
     - a DBIx::Class::Schema object, with object of the data conection as $dbh
     - a DBIx::Class::Row object, with the data of the database or data for put into de database
     - a scalar $object_creation_date get from the database in the moment of the creation of a new object and use as default 
       values for create_date and modified_date.
     - a scalar, $username. The idea of metadata is that trace all the bulk changes in the database, so need store the username
       that do this changes. It is stored as $object_creation_username and used in create_person_id or modified_person_id by 
       default.

   But a metadata object also is a second level object that manage the DBIx::Class object, that use constraints to prevent the 
   uncontrol data insert (for example of metadata_id that don't exists without use integer generated by the metadata_metadata_id_seq)
   and that give other functions as trace_history.


=head1 AUTHOR

Aureliano Bombarely <ab782@cornell.edu>


=head1 CLASS METHODS

The following class methods are implemented:

=head1 STANDARD METHODS

  Standard methods are methods to get, set or store data

=cut 

use strict;
use warnings;

package CXGN::SEDM::Metadata;

use base qw | CXGN::DB::Object |;
use CXGN::SEDM::Schema;
use Carp;



=head2 constructor new

  Usage: my $metadata = CXGN::SEDM::Metadata->new($schema, $username, $metadata_id);
  Desc:
  Ret: a CXGN::SEDM::Metadata object
  Args: a $schema a schema object, preferentially created using:
        CXGN::SEDM::Schema->connect( sub{ CXGN::DB::Connection->new()->get_actual_dbh()}, %other_parameters);
        a $username used in the create_person_id and/or modified_person_id
        a $metadata_id, if $metadata_id is omitted, an empty metadata object is created.
  Side_Effects: accesses the database, check if exists the database columns that this object use. die if the id is not an integer.
  Example: my $metadata = CXGN::SEDM::Metadata->new($schema, $username, $metadata_id);

=cut

sub new {
    my $class = shift;
    my $schema = shift;
    my $username = shift;
    my $id = shift;

    ### First, bless the class to create the object and set the schema into de object.
    my $self = $class->SUPER::new($schema);
    $self->set_schema($schema);
    $self->set_object_creation_date();
    if (defined $username) {
	$self->set_object_creation_user($username);
    }

    ### Second, check that ID is an integer. If it is right go and get all the data for this row in the database. If don't find
     ### anything, we have three options, create a new one with the metadata_id=$metadata_id, die or create a new one with an empty
      ### object. The solution will be the follow:
       ###     (1)- Create a new one with a metadata_id=$metadata_id is not a good idea because when you store it, it will store this
        ###         metadata_id (if do not exists) without any consideration with the metadata_metadata_id_seq. The alternative (if you
         ###        want enforce it), is use set_metadata_id.
          ###   2 - Die... it is the thing that it will do.
           ### (3)- Create a new one with an empty object... if the user don't know it, could be confuse.

    my $metadata;
    if (defined $id) {
	unless ($id =~ m/^\d+$/) {  ## The id can be only an integer... so it is better if we detect this fail before.
	    my $error_message = "\nDATA TYPE ERROR: The metadata_id ($id) for CXGN::SEDM::Metadata->new() IS NOT AN INTEGER.\n\n";
	    croak($error_message);
	}
	$metadata = $schema->resultset('Metadata')->find({ metadata_id => $id });
	unless (defined $metadata) {
	    my $error_message2 = "\nDATABASE COHERENCE ERROR: The metadata_id ($id) for CXGN::SEDM::Metadata->new(\$schema, \$id) ";
            $error_message2 .= "DON'T EXISTS INTO THE DATABASE.\n";
	    $error_message2 .= "If you need enforce it, you can create an empty object (my $metadata = CXGN::SEDM::Metadata->new";
            $error_message2 .= "(\$schema);) and set the variable ($metadata->set_metadata_id(\$id);)";
	    croak($error_message2);
	}
    } else {
	$metadata = $schema->resultset('Metadata')->new({});   ### Create an empty object; 
    }
    $self->set_metadata_row($metadata);
    return $self;
}


=head2 accessors get_schema, set_schema (deprecated)

  Usage: my $schema = $self->get_schema();
         $self->set_schema($schema);
  Desc: DEPRECATED: Now it is inherit in the CXGN::DB::Object used as base.
        Get or set a schema_object into a metadata_object
  Ret:   Get => $schema, a schema object (CXGN::SEDM::Schema).
         Set => none
  Args:  Get => none
         Set => $schema, a schema object (CXGN::SEDM::Schema).
  Side_Effects: With set check if the argument is a schema_object. If fail, dies
  Example: my $schema = $self->get_schema();
           $self->set_schema($schema);

=cut


### DEPRECATED FOR THE USE OF CXGN::DB::Object as base
#sub get_schema {
#  my $self = shift;
#  return $self->{schema}; 
#}
#
#sub set_schema {
#  my $self = shift;
#  my $schema = shift || croak("FUNCTION PARAMETER ERROR: None schema object was supplied for set_schema function");
#  my $schema_ref = ref $schema;
#  if ($schema_ref ne 'CXGN::SEDM::Schema') {
#      my $error_message = "SET_SCHEMA ARGUMENT ERROR: The schema_object:$schema ";
#      $error_message .= "is not an schema_object (package_name:CXGN::SEDM::Schema).\n";
#      croak($error_message);
#  }
#  $self->{schema} = $schema;
#}

=head2 accessors get_object_creation_date, set_object_creation_date

  Usage: my $creation_date = $self->get_object_creation_date();
         $self->set_object_creation_date();
  Desc: Get or set the creation date of the object. When the object is created, it run the query "SELECT now()" and 
        store the data. It will be used in the metadata object for create_date and modified_date fields. 
  Ret:  Get => A scalar with the date as timestamp with time zone.
        Set => none
  Args: Get => none
        Set => none
  Side_Effects: none
  Example: my $creation_date = $self->get_object_creation_date();

=cut

sub get_object_creation_date {
  my $self = shift;
  return $self->{object_creation_date}; 
}

sub set_object_creation_date {
  my $self = shift;
  my $query = "SELECT now()";
  my $sth = $self->get_schema()->storage()->dbh()->prepare($query);
  $sth->execute();
  my ($date) = $sth->fetchrow_array();
  $self->{object_creation_date} = $date;
}

=head2 accessors get_object_creation_user, set_object_creation_user

  Usage: my $creation_user = $self->get_object_creation_user();
        $self->set_object_creation_user();
  Desc: Get or set the creation user of the object. When the object is created, get the $user as argument. It can exists into the
        database or not, bu it can be used to create or modify different metadata objects. Before store something the metadata
        object will transfer the sp_person_id to the create or modified user by default (If they are not empty) 
  Ret:  Get => A scalar with the user name.
        Set => none
  Args: Get => none
        Set => A scalar with the user name.
  Side_Effects: croak if the username is not into the database
  Example: my $creation_user = $self->get_object_creation_user();

=cut

sub get_object_creation_user {
  my $self = shift;
  return $self->{object_creation_user}; 
}

sub set_object_creation_user {
  my $self = shift;
  my $username = shift;
  my $query = "SELECT sp_person_id FROM sgn_people.sp_person WHERE username=?";
  my $sth = $self->get_schema()->storage()->dbh()->prepare($query);
  $sth->execute($username);
  my ($sp_person_id) = $sth->fetchrow_array();
  if (defined $sp_person_id) {
      $self->{object_creation_user} = $username;
  } else {
      croak("DATA INTEGRATION ERROR:The username ($username) used set_object_creation_user dont exists in sgn_people.sp_person table\n");
  }
}

=head2 accessors get_metadata_row, set_metadata_row

  Usage: my $metadata_row_object = $self->get_metadata_row();
         $self->set_metadata_row($metadata_result_set_object);
  Desc: Get or set a a result set object into a metadata_object
  Ret:   Get => $metadata_row_object, a schema object (CXGN::SEDM::Schema::Metadata).
         Set => none
  Args:  Get => none
         Set => $metadata_row_object, a schema object (CXGN::SEDM::Schema::Metadata).
  Side_Effects: With set check if the argument is a result set object. If fail, dies.
  Example: my $metadata_row_object = $self->get_metadata_row();
           $self->set_metadata_row($metadata_row_object);

=cut

sub get_metadata_row {
  my $self = shift;
  return $self->{metadata_row}; 
}

sub set_metadata_row {
  my $self = shift;
  my $metadata_row = shift || croak("FUNCTION PARAMETER ERROR: None metadata_row object was supplied for set_metadata_row function");
  my $ref_metadata_row = ref($metadata_row);
  if (ref($metadata_row) ne 'CXGN::SEDM::Schema::Metadata') {
      my $error_message = "SET_METADATA_ROW ARGUMENT ERROR: The metadata_result_set_object:$metadata_row ";
      $error_message .= "is not an metadata_row object (package_name:CXGN::SEDM::Schema::Metadata).\n";
      croak($error_message);
  }
  $self->{metadata_row} = $metadata_row;
}

=head2 get_metadata_id, set_metadata_id
  
  Usage: my $metadata_id=$metadata->get_metadata_id();
         $metadata->set_metadata_id($metadata_id);
  Desc: get or set a metadata_id in a metadata object. 
        If you want set a metadata_id that do not exists into the database you should consider that when you store this object
        you can store a metadata_id that do not follow the metadata_id
  Ret:  get=> $metadata_id, a scalar.
        set=> none
  Args: get=> none
        set=> $metadata_id, a scalar (constraint: it must be an integer)
  Side_Effects: none
  Example: my $metadata_id=$metadata->get_metadata_id(); 

=cut

sub get_metadata_id {
  my $self=shift;
  return $self->get_metadata_row->get_column('metadata_id');
}

sub set_metadata_id {
  my $self = shift;
  my $data = shift;
  if (defined $data) {
      unless ($data =~ m/^\d+$/) {
	  croak("DATA TYPE ERROR: The metadata_id ($data) for CXGN::SEDM::Metadata->set_metadata_id() IS NOT AN INTEGER.\n\n");
      }
      my $metadata_row = $self->get_metadata_row();
      $metadata_row->set_column( metadata_id => $data );
      $self->set_metadata_row($metadata_row);
  } else {
      croak("FUNCTION PARAMETER ERROR: The metadata_id was not supplied for set_metadata_id function");
  }
}

=head2 accessors get_create_date, set_create_date

  Usage: my $create_date=$metadata->get_create_date();
         $metadata->set_create_date($create_date);
  Desc: Get the create_date for a metadata object from the database. 
        The create_date should not be set, because it is create by default with now() value into the database 
        when is created a new metadata.
  Ret:  get=> $create_date, a scalar
        set=> none
  Args: get=> none
        set=> $create_date, a scalar
  Side_Effects: none
  Example: my $create_date=$metadata->get_create_date();

=cut

sub get_create_date {
  my $self = shift;
  return $self->get_metadata_row->get_column('create_date'); 
}

sub set_create_date {
  my $self = shift;
  my $data = shift || croak("FUNCTION PARAMETER ERROR: None data was supplied for set_create_date function");
  my $metadata_rso = $self->get_metadata_row();
  $metadata_rso->set_column( create_date => $data );
  $self->set_metadata_row($metadata_rso);
}


=head2 accessors get_create_person_id, set_create_person_id

  Usage: my $create_person_id=$metadata->get_create_person_id();
         $metadata->set_create_person_id($create_person_id);
  Desc: get or set the create_person_id for a metadata object from the database
  Ret:  get=> $create_person_id, a scalar
        set=> none
  Args: get=> none
        set=> $create_person_id, a scalar (constraint: it must be an integer)
  Side_Effects: none
  Example: my $create_person_id=$metadata->get_create_person_id();

=cut

sub get_create_person_id {
  my $self = shift;
  return $self->get_metadata_row->get_column('create_person_id'); 
}

sub set_create_person_id {
  my $self = shift;
  my $data = shift;
  if (defined $data) {
      unless ($data =~ m/^\d+$/) {
	  croak("DATA TYPE ERROR: The create_person_id ($data) for CXGN::SEDM::Metadata->set_create_person_id IS NOT AN INTEGER.\n\n");
      }
      my $metadata_rso = $self->get_metadata_row();
      $metadata_rso->set_column(create_person_id => $data);
      $self->set_metadata_row($metadata_rso);
  } else {
      croak("FUNCTION PARAMETER ERROR: The parameter sp_person_id was not supplied for set_create_person_id function");
  }
}


=head2 accessors get_create_person_id_by_username, set_create_person_id_by_username

  Usage: my $create_person_username=$metadata->get_create_person_id_by_username();
         $metadata->set_create_person_id_by_username($create_person_username);
  Desc: get or set the create_person_id for a metadata object from the database
  Ret:  get=> $create_person_username, a scalar
        set=> none
  Args: get=> none
        set=> $create_person_username, a scalar (constraint)
  Side_Effects: when set is used, check if exists the username, if fails, die with a error message.
  Example: my $create_person_username=$metadata->get_create_person_by_username();

=cut

sub get_create_person_id_by_username {
  my $self = shift;
  my $username;
  my $create_person_id = $self->get_metadata_row()->get_column('create_person_id');
  my $metadata_id = $self->get_metadata_row()->get_column('metadata_id');
  if (defined $create_person_id) {
      my $query = "SELECT username FROM sgn_people.sp_person WHERE sp_person_id=?";
      my $sth = $self->get_schema()->storage()->dbh()->prepare($query);
      $sth->execute($create_person_id);
      ($username)=$sth->fetchrow_array();
      ## If the query don't return any username there are some errors than should be reported:
       ##    1- If the create_person_id store in the object using set_create_person_id do not exists (data integration error).
        ##   2- If the create_person_id of the sed.metadata table (set in the object using fetch) do not exists (data coherence error)
         ##  3- If the create_person_id of the sed.metadata table do not exists and the create_person_id store in the table do not
          ##    exists in the sgn_people.sp_person table (data coherence error)

      unless (defined $username) {
	  my $error = "DATA INTEGRATION ERROR: ";
	  $error .= "The create_person_id stored in this object do not exist in the table sgn_people.sp_person.\n";
	  if (defined $metadata_id) {
	      my $sedquery = "SELECT create_person_id FROM sed.metadata WHERE metadata_id=?";
	      my $sedsth = $self->get_schema->storage()->dbh()->prepare($sedquery);
	      $sedsth->execute($metadata_id);
	      my ($sed_create_person_id) = $sedsth->fetchrow_array();
	      if (defined $sed_create_person_id) {
		  if ($create_person_id != $sed_create_person_id) {
		      $error .= "The create_person_id=$create_person_id of the metadata object is not the same ";
		      $error .= "than the sed.metadata.create_person_id for the metadata_id=$metadata_id";
		      croak($error);
		  } else {
		      $error .= "DATA COHERENCE ERROR: The sed.metadata.create_person_id for the metadata_id=$metadata_id ";
		      $error .= "do not exists in the sgn_people.sp_person table\n\n";
		      croak($error);
		  }
	      } else {
		  croak("DATA COHERENCE ERROR:The create_person_id set in the object do not exists in the sed.metadata table\n");
	      }
	  } else {
	      croak($error);
	  }
      }
  } 
  return $username;
}

sub set_create_person_id_by_username {
  my $self = shift;
  my $data = shift || croak("FUNCTION PARAMETER ERROR: The username was not supplied for set_create_person_id_by_username function");
  my $query = "SELECT sp_person_id FROM sgn_people.sp_person WHERE username=?";
  my $sth = $self->get_schema()->storage()->dbh()->prepare($query);
  $sth->execute($data);
  my ($create_person_id) = $sth->fetchrow_array();

  ## Only need be reported if the username that it is being set is not in the sgn_people.sp_person table

  if (defined $create_person_id) {
      my $metadata_row = $self->get_metadata_row();
      $metadata_row->set_column(create_person_id => $create_person_id);
      $self->set_metadata_row($metadata_row);
  } else {
      croak("DATA INTEGRATION ERROR: The username=$data do not exists in the sgn_people.sp_person table.\n");
  }
}

=head2 accessors get_modified_date, set_modified_date

  Usage: my $modified_date=$metadata->get_modified_date();
         $metadata->set_modified_date($modified_date);
  Desc: get or set the modified_date for a metadata object from the database
  Ret:  get=> $modified_date, a scalar
        set=> none
  Args: get=> none
        set=> $modified_date, a scalar
  Side_Effects: none
  Example: my $modified_date=$metadata->get_modified_date();

=cut

sub get_modified_date {
  my $self = shift;
  return $self->get_metadata_row()->get_column('modified_date'); 
}

sub set_modified_date {
  my $self = shift;
  my $data = shift;
  my $metadata_rso = $self->get_metadata_row();
  $metadata_rso->set_column( modified_date => $data );
  $self->set_metadata_row($metadata_rso);
}


=head2 accessors get_modified_person_id, set_modified_person_id

  Usage: my $modified_person_id=$metadata->get_modified_person_id();
         $metadata->set_modified_person_id($modified_person_id);
  Desc: get or set the modified_person_id for a metadata object from the database
  Ret:  get=> $modified_person_id, a scalar
        set=> none
  Args: get=> none
        set=> $modified_person_id, a scalar (constraint, it must be an integer)
  Side_Effects: when set is used, check that the $modified_person_id is an integer, if fails, die with a error message.
  Example: my $modified_person_id=$metadata->get_modified_person_id();

=cut

sub get_modified_person_id {
  my $self = shift;
  return $self->get_metadata_row()->get_column('modified_person_id'); 
}

sub set_modified_person_id {
  my $self = shift;
  my $data = shift;
  if (defined $data) {
      unless ($data =~ m/^\d+$/) {
	  croak("DATA TYPE ERROR:The modified_person_id ($data) in CXGN::SEDM::Metadata->set_modified_person_id() IS NOT AN INTEGER.\n");
      }
      my $metadata_rso = $self->get_metadata_row();
      $metadata_rso->set_column( modified_person_id => $data );
      $self->set_metadata_row($metadata_rso);
  } else {
      croak("FUNCTION PARAMETER ERROR: The paramater modified_person_id was not supplied for set_modified_person_id function");
  }
}

=head2 accessors get_modified_person_id_by_username, set_modified_person_id_by_username

  Usage: my $modified_person_username=$metadata->get_modified_person_id_by_username();
         $metadata->set_modified_person_id_by_username($modified_person_username);
  Desc: get or set the modified_person_id for a metadata object from the database
  Ret:  get=> $modified_person_username, a scalar
        set=> none
  Args: get=> none
        set=> $modified_person_username, a scalar (constraint)
  Side_Effects: when set is used, check if exists the username, if fails, die with a error message.
  Example: my $modified_person_username=$metadata->get_modified_person_by_username();

=cut

sub get_modified_person_id_by_username {
  my $self = shift;
  my $username;
  my $modified_person_id = $self->get_metadata_row()->get_column('modified_person_id'); 
  my $metadata_id = $self->get_metadata_row()->get_column('metadata_id');
  
  if (defined $modified_person_id) {
      my $query = "SELECT username FROM sgn_people.sp_person WHERE sp_person_id=?";
      my $sth = $self->get_schema()->storage()->dbh()->prepare($query);
      $sth->execute($modified_person_id);
      ($username)=$sth->fetchrow_array();

      ## If the query don't return any username there are some errors than should be reported:
       ##    1- If the modified_person_id store in the object using set_create_person_id do not exists (data integration error).
        ##   2- If the modified_person_id of the sed.metadata table (set in the object using fetch) do not exists (data coherence error)
         ##  3- If the modified_person_id of the sed.metadata table do not exists and the create_person_id store in the table do not
          ##    exists in the sgn_people.sp_person table (data integration error)

      unless (defined $username) {
	  my $error_message = "DATA ERROR:The modified_person_id stored in this object do not exist in table sgn_people.sp_person.\n";
	  if (defined $metadata_id) {
	      my $sedquery = "SELECT modified_person_id FROM sed.metadata WHERE metadata_id=?";
	      my $sedsth = $self->get_schema()->storage()->dbh()->prepare($sedquery);
	      $sedsth->execute($metadata_id);
	      my ($sed_modified_person_id) = $sedsth->fetchrow_array();
	      if (defined $sed_modified_person_id) {
		  if ($modified_person_id != $sed_modified_person_id) {
		      $error_message .= "The modified_person_id=$modified_person_id of the metadata object is not the same ";
		      $error_message .= "than the sed.metadata.modified_person_id for the metadata_id=$metadata_id";
		      croak($error_message);
		  } else {
		      $error_message .= "DATA COHERENCE ERROR: The sed.metadata.modified_person_id for the metadata_id=$metadata_id ";
		      $error_message .= "do not exists in the sgn_people.sp_person table\n\n";
		      croak($error_message);
		  }
	      } else {
		  croak("DATA INTEGRATION ERROR:The modified_person_id set in the object do not exists in the sed.metadata table\n");
	      }
	  } else {
	      croak($error_message);
	  }
      }
  }
  return $username;
}

sub set_modified_person_id_by_username {
  my $self = shift;
  my $data = shift || croak("FUNCTION PARAMETER ERROR: The username was not supplied for set_modified_person_id_by_username function");
  my $query = "SELECT sp_person_id FROM sgn_people.sp_person WHERE username=?";
  my $sth = $self->get_schema()->storage()->dbh()->prepare($query);
  $sth->execute($data);
  my ($modified_person_id) = $sth->fetchrow_array();

  ## Only need be reported if the username that it is being set is not in the sgn_people.sp_person table

  if (defined $modified_person_id) {
      my $metadata_rso = $self->get_metadata_row();
      $metadata_rso->set_column( modified_person_id => $modified_person_id);
      $self->set_metadata_row($metadata_rso);
  } else {
      croak("DATA INTEGRATION ERROR: The username=$data do not exists in the sgn_people.sp_person table.\n");
  }
}

=head2 accessors get_modification_note, set_modification_note


  Usage: my $modification_note=$metadata->get_modification_note();
         $metadata->set_modification_note($modification_note);
  Desc: get or set the modification_note for a metadata object from the database
  Ret:  get=> $modification_note, a scalar
        set=> none
  Args: get=> none
        set=> $modification_note, a scalar.
  Side_Effects: none
  Example: my $modification_note=$metadata->get_modification_note();

=cut

sub get_modification_note {
  my $self = shift;
  return $self->get_metadata_row()->get_column('modification_note'); 
}

sub set_modification_note {
  my $self = shift;
  my $data = shift;
  my $metadata_row = $self->get_metadata_row();
  $metadata_row->set_column( modification_note => $data );
  $self->set_metadata_row($metadata_row);
}

=head2 accessors get_previous_metadata_id, set_previous_metadata_id

  Usage: my $previous_metadata_id=$metadata->get_previous_metadata_id();
         $metadata->set_previous_metadata_id($previous_metadata_id);
  Desc: get or set the previous_metadata_id for a metadata object from the database
  Ret:  get=> $previous_metadata_id, a scalar
        set=> none
  Args: get=> none
        set=> $previous_metadata_id, a scalar (constraint, it must be an integer)
  Side_Effects: none
  Example: my $previous_metadata_id=$metadata->get_previous_metadata_id();

=cut

sub get_previous_metadata_id {
  my $self = shift;
  return $self->get_metadata_row()->get_column('previous_metadata_id'); 
}

sub set_previous_metadata_id {
  my $self = shift;
  my $data = shift;
  if (defined $data) {
      unless ($data =~ m/^\d+$/) {
	 croak("DATA TYPE ERROR:The previous_metadata_id ($data) CXGN::SEDM::Metadata->set_previous_metadata_id() ISN'T AN INTEGER.\n");
      }
      my $metadata_row = $self->get_metadata_row();
      $metadata_row->set_column( previous_metadata_id => $data );
      $self->set_metadata_row($metadata_row);
  } else {
      croak("FUNCTION PARAMETER ERROR: The paramater previous_metadata_id was not supplied for set_previous_metadata_id function");
  }
}

=head2 accessors get_obsolete, set_obsolete

  Usage: my $obsolete=$metadata->get_obsolete();
         $metadata->set_obsolete($obsolete);
  Desc: get or set obsolete for a metadata object from the database. Obsolete=0 means false and Obsolete=1 means true
  Ret:  get=> $obsolete, a scalar
        set=> none
  Args: get=> none
        set=> $obsolete, a scalar (constraint, it must be an integer with values 0 or 1)
  Side_Effects: none
  Example: my $obsolete=$metadata->get_obsolete();

=cut

sub get_obsolete {
  my $self = shift;
  return $self->get_metadata_row()->get_column('obsolete'); 
}

sub set_obsolete {
  my $self = shift;
  my $data = shift;
  if (defined $data) {
      if ($data != 0 && $data != 1) {
	  croak("DATA TYPE ERROR: The obsolete ($data) for CXGN::SEDM::Metadata->set_obsolete() HAS DIFFERENT VALUE FROM 0 OR 1.\n\n");
      }
      my $metadata_row = $self->get_metadata_row();
      $metadata_row->set_column( obsolete => $data );
      $self->set_metadata_row($metadata_row);
  } else {
      croak("FUNCTION PARAMETER ERROR: The paramater obsolete (1 or 0) was not supplied for set_obsolete function");
  }
}

=head2 accessors get_obsolete_note, set_obsolete_note

  Usage: my $obsolete_note=$metadata->get_obsolete_note();
         $metadata->set_obsolete_note($obsolete_note);
  Desc: get or set the obsolete_note for a metadata object from the database
  Ret:  get=> $obsolete_note, a scalar
        set=> none
  Args: get=> none
        set=> $obsolete_note, a scalar
  Side_Effects: none
  Example: my $obsolete_note=$metadata->get_obsolete_note();

=cut

sub get_obsolete_note {
  my $self = shift;
  return $self->get_metadata_row()->get_column('obsolete_note'); 
}

sub set_obsolete_note {
  my $self = shift;
  my $data = shift;
  my $metadata_row = $self->get_metadata_row();
  $metadata_row->set_column( obsolete_note => $data );
  $self->set_metadata_row($metadata_row);
}

=head2 accessors get_metadata_by_rows, set_metadata_by_rows

  Usage: my %metadata_complete_rows = $self->get_metadata_by_rows();
         $self->set_metadata_by_rows( { metadata_id = $metadata_id, 
					create_date = $create_date,
					create_person_id = $create_person_id,
					modified_date = $modified_date,
				        modified_person_id = $modified_person_id, 
				        modification_note = $modification_note, 
				        previous_metadata_id = $previous_metadata_id, 
				        obsolete = $obsolete, 
				        obsolete_note = $obsolete_note });
  Desc: Get or set all the metadata for a row.
  Ret:   Get => a hash with keys=column_name and values=field_value
         Set => none
  Args:  Get => none
         Set => a hash reference with keys=column_name and values=field_value
  Side_Effects: Check if all the parameters are right, if not croak
  Example: $self->set_metadata_by_rows( { modification_note => 'this is a test', obsolete => 1} );

=cut

sub get_metadata_by_rows {
  my $self = shift;
  return $self->get_metadata_row->get_columns(); 
}

sub set_metadata_by_rows {
  my $self = shift;
  my $href = shift;
  unless (ref $href eq 'HASH') {
      croak("FUNCTION PARAMETER ERROR: The paramater $href for set_metadata_complete_row function is not a hash reference.\n");
  } else {
      my %hash = %{$href};
      my @columns = ( 'metadata_id', 'create_date', 'create_person_id', 'modified_date', 'modified_person_id', 'modification_note', 
                      'previous_metadata_id', 'obsolete', 'obsolete_note');
      my @keys = keys %hash;
      foreach my $key (@keys) {
	  my $match = 0;
	  foreach my $col (@columns) {
	      if ($key eq $col) {
		  $match = 1;
	      }
	  }
	  if ($match == 0) {
	      my $error = "FUNCTION PARAMETER ERROR: The parameter is a hash with a non valid key ($key). Only are permited the follow";
	      $error .= "keys:\n";
	      my $permited_keys = join ', ', @columns;
	      $error .= "$permited_keys\n";
	      croak($error);
	  }
      }
      my $metadata_row = $self->get_metadata_row();
      $metadata_row->set_columns($href);
      $self->set_metadata_row($metadata_row);
  }
}


=head2 trace_history

  Usage: my @history=$self->trace_history($metadata_id);
  Desc: get the history of a metadata and return an array with metadata objects
  Ret: An array of metadata objects order from the argument to the previous metadata object.
  Args: $metadata_id, trace from it to the oldest.
  Side_Effects: none
  Example: my @history=$self->trace_history($metadata_id);

=cut

sub trace_history {
    my $self = shift;
    my $metadata_id = shift || croak("FUNCTION PARAMETER ERROR: The paramater metadata_id was not supplied for trace_history function");
    my @history;

    while (defined $metadata_id) {
	my $metadata = CXGN::SEDM::Metadata->new($self->get_schema(), $self->get_object_creation_user, $metadata_id);
	push @history, $metadata;
        my $previous_metadata_id = $metadata->get_metadata_row()->get_column('previous_metadata_id');
	if (defined $previous_metadata_id) {
	    $metadata_id=$previous_metadata_id;
	} else {
	    undef $metadata_id;
	}
    }
    return @history;
}

=head2 store

  Usage: my $new_metadata=$metadata->store();
  Desc: Store in the database the data of the metadata object.
  Ret: $metadata, a new metadata object.
  Args: none
  Side_Effects: modify the database
  Example: my $new_metadata=$metadata->store();

=cut

sub store {
    my $self = shift;
    my $new_metadata;
    my $usercheck="SELECT current_user";
    
    my $sth0=$self->get_schema->storage()->dbh()->prepare($usercheck);
    $sth0->execute();
    my ($user)=$sth0->fetchrow_array();
    if ($user ne 'postgres') {
	croak("USER ACCESS ERROR: Only postgres user can store data.\n");
    }
   
    my $metadata_row = $self->get_metadata_row();
    my $metadata_id = $metadata_row->get_column('metadata_id');

    if (defined $metadata_id) {
        
        ### To be secure that the create_date and create_person_id are the same than in the database we are going to take from it.
        my $metadata_resultset = $self->get_schema->resultset('Metadata');
	my $create_date = $metadata_resultset->search( {metadata_id => $metadata_id} )->single()->get_column('create_date');
	my $create_person_id = $metadata_resultset->search( {metadata_id => $metadata_id} )->single()->get_column('create_person_id');

	### Before Update a metadata, that means insert new metadata with the previous_metadata_id=$metadata_id, 
        ### create_date and create_person_id the same that the old metadata_id, it will check the data

	unless (defined $create_date) {
	    my $error_message = "DATA COHERENCE ERROR: The metadata_id=$metadata_id have not any create_date in the db.\n";
	    $error_message .= "\tThe store function can not insert a new metadata using the metadata_id=$metadata_id ";
	    $error_message .= "as previous_metadata_id if it have not any create_date.\n";
	    croak($error_message);
	}
	unless (defined $create_person_id) {
	    my $error_message2 = "DATA COHERENCE ERROR: The metadata_id=$metadata_id have not any create_person_id in the db.\n";
	    $error_message2 .= "\tThe store function can not insert a new metadata using the metadata_id=$metadata_id ";
	    $error_message2 .= "as previous_metadata_id if it have not any create_person_id.\n";
	    croak($error_message2);
	}

	### Now, the function have a create_date and a create_person_id, so it will need check if the modified_person_id
        ### is right.
	
	my $modified_person_id = $self->get_modified_person_id();
	unless (defined $modified_person_id) {                                               ## If itsn't defined the modified_person_id
	    $self->set_modified_person_id_by_username( $self->get_object_creation_user() );  ## set this value with the default value
	    $metadata_row = $self->get_metadata_row();                                       ## (object_creation_user) in the metadata
	    $modified_person_id = $self->get_modified_person_id();                           ## object. After that, it will overwrite the
            unless (defined $modified_person_id) {                                           ## row with a new row from metadata object
		croak("DATA INTEGRATION ERROR: The function store can not be used without a modified_person_id.\n\n");
	    }
	} else {
	    my $check_modified_person_id = $self->exists_sp_person_id($modified_person_id);
	    if ($check_modified_person_id == 0) {
		croak("DATA INTEGRATION ERROR:The data=$modified_person_id do not exist in the table sgn_people.sp_person.\n\n");
	    }
	}
	
        ### The new metadata will have the create_date=(old), create_person_id=(old), previous_metadata_id=(old_metadata_id), 
        ### metadata_id => empty (not undef because it can not be undef). 

	my $new_insert_metadata = $self->get_schema->resultset('Metadata')->new({});
	$new_insert_metadata->set_column( create_date => $create_date);
	$new_insert_metadata->set_column( create_person_id => $create_person_id);
	if (defined $self->get_modified_date() ) {
	    $new_insert_metadata->set_column( modified_date => $metadata_row->get_column('modified_date') );
	} else {
	    $new_insert_metadata->set_column( modified_date => $self->get_object_creation_date() );  ## By default if you 
	}                                                                                            ## haven't any modified_date
	$new_insert_metadata->set_column( modified_person_id => $modified_person_id);                ## it will take the date of
	if (defined $self->get_modification_note() ) {                                               ## the creation of the object.
	    $new_insert_metadata->set_column( modification_note => $self->get_modification_note() );
	}
	if (defined $self->get_obsolete() ) {
            $new_insert_metadata->set_column( obsolete => $self->get_obsolete() );
	}
	if (defined $self->get_obsolete_note() ) {
	    $new_insert_metadata->set_column ( obsolete_note => $self->get_obsolete_note() );
	}
	$new_insert_metadata->set_column( previous_metadata_id => $metadata_id);
	my $row_inserted = $new_insert_metadata->insert();
	my $new_id = $row_inserted->id();
	    
        ### This could be true if all the rows that have this metadata change to the new one, but other possibility is that
        ### it change only for some of them. In this case, it don't should be obsolete.
	### The last thing, change the status of the old metadata id for obsolete. To do it we get all the old data from the
        ### database and change the obsolete and the obsolete_note 	    
	## my $old_metadata_row = $self->get_schema->resultset('Metadata')->search({ metadata_id => $metadata_id })->single();
	## my $old_metadata_obsolete_note="New metadata was added (with metadata_id = $new_id)";
	## $old_metadata_row->set_column( obsolete => 1);
	## $old_metadata_row->set_column( obsolete_note => $old_metadata_obsolete_note);
	## $old_metadata_row->update();
	
	### Finally we overwrite the object with a new object;

        $new_metadata = CXGN::SEDM::Metadata->new($self->get_schema, $self->get_object_creation_user(), $new_id);
	
    } else {

	### Before Insert a new metadata, it will check if exists the data or if the create_person_id exists in 
        ### the sgn_people.sp_person table
	
	my $new_create_person_id = $self->get_create_person_id();
	unless (defined $new_create_person_id) {
	    $self->set_create_person_id_by_username( $self->get_object_creation_user() );  ## set this value with the default value
	    $metadata_row = $self->get_metadata_row();                                     ## (object_creation_user) in the metadata
	    $new_create_person_id = $self->get_create_person_id();
	}
	unless (defined $new_create_person_id) {
      	    croak("DATA INTEGRATION ERROR: The function store can not be used without a create_person_id.\n\n");
	} else {
	    my $create_person_id_check = $self->exists_sp_person_id($new_create_person_id);
	    if ($create_person_id_check == 0) {
		croak("DATA INTEGRATION ERROR: The data=$new_create_person_id do not exist in the table sgn_people.sp_person.\n\n");
	    }

        ### Ok, now we know that this data exists, so we insert a new metadata. A new metadata use by default 
        ### create_date=$self->get_object_creation_date so, it will set this value before insert a new metadata.
        ### This value should not be updatable because it is created in the moment that you
        ### create a new metadata. If you want modify something, you should use a modify_date and modify_person_id in a new metadata.
	    
	    $metadata_row->set_column( create_date => $self->get_object_creation_date() );
	    my $row_inserted = $metadata_row->insert();
	    my $new_id = $row_inserted->id();
	### Finally we get all the data from the database as new metadata object.
	    $new_metadata = CXGN::SEDM::Metadata->new($self->get_schema, $self->get_object_creation_user(), $new_id);
	}
    }
    return $new_metadata;    
}

=head2 find_or_store

  Usage: my $new_metadata_object = $metadata->find_or_store();
  Desc: Check if exists a metadata_row into the database with all the parameters of the metadata object except metadata_id.
        If exists return this line as a new metadata_object with the metadata_id of the metadata row from the database.
        If it do not exists, store a new metadata object using the function store.
  Ret: A new metadata object 
  Args: none
  Side_Effects: Store data in the database if the metadata row do not exists
  Example: my $new_metadata_object = $metadata->find_or_store();

=cut

sub find_or_store {
    my $self = shift;
    my $new_metadata_object;
    my %metadata_col = $self->get_metadata_by_rows();
    my @metadata_db_row = $self->get_schema()->resultset('Metadata')->search({ %metadata_col });

    if (defined $metadata_db_row[0]) {
	my @test1k = keys %metadata_col;
	my @test1v = values %metadata_col;
	my %val = $metadata_db_row[0]->get_columns();
	my @test2k = keys %val;
	my @test2v = values %val;
	$new_metadata_object = CXGN::SEDM::Metadata->new( $self->get_schema(), 
							  $self->get_object_creation_user(), 
							  $metadata_db_row[0]->get_column('metadata_id')
							  );
    } else {
	$new_metadata_object = $self->store();
    }
    return $new_metadata_object;
}




=head1 CHECK METHODS

  The check methods return true ($check = 1) if exists the variable that you are testing.

=cut


=head2 exists_database_columns

  Usage: my $check_columns_href = $self->exists_database_columns($mode);
  Desc: check is exists the column in the schema object
  Ret: A hash reference with keys=column_name and values=0 (false) or 1(true)
  Args: $mode, a scalar that can be 'die' or 'croack'
  Side_Effects: die (or croack) with a error message if do not exists the column (in mode die or croack)
  Example: my $check_columsn_href = $self->exists_database_columns();
           $self->check_database_columns('croack')

=cut

sub exists_database_columns {
    my $self = shift;
    my $mode = shift || "none";

    my %check_columns;
    my $die_mode = 0;
    if ($mode eq 'die' || $mode eq 'croack') {
	$die_mode = 1;
    }
	
    my @columns_to_check = ('sgn_people.sp_person.sp_person_id');                    ## Aditional columns to check of other tables
    my @database_columns_used = $self->get_schema()->source('Metadata')->columns();  ## Get all the column_names for the table metadata
    foreach my $column_name (@database_columns_used) {                               ## Complete the name with schema.table
	my $complete_name = 'sed.metadata.';
	$complete_name .= $column_name;
	push @columns_to_check, $complete_name;
    }
    foreach my $column_name (@columns_to_check) {                        ## Check for all the columns of the array if exists or not
	my @data = split(/\./, $column_name);
	my $schema = $data[0];
	my $table = $data[1];
	my $column = $data[2];

	my $query = "SELECT count(a.attname) AS tot FROM pg_catalog.pg_stat_user_tables AS t, pg_catalog.pg_attribute a
                     WHERE t.relid = a.attrelid AND t.schemaname = ? AND t.relname = ? AND a.attname = ?";
	my $sth = $self->get_schema()->storage()->dbh()->prepare($query);
        $sth->execute($schema,$table,$column);
        my ($e) = $sth->fetchrow_array();
	$check_columns{$column_name} = $e;
        if ($e == 0 && $die_mode == 1) {                                                   ## If do not exists return 0.
            if ($mode eq 'die') {
		die("\nDATABASE TABLE ERROR: The column:$schema.$table.$column do not exists into the database.\n\n");
	    } elsif ($mode eq 'croack') {
		croack("\nDATABASE TABLE ERROR: The column:$schema.$table.$column do not exists into the database.\n\n");
	    }
        }
    }
    return \%check_columns;
}

=head2 exists_sp_person_id

  Usage: my $check = exists_person_id($person_id)
  Desc: Check if exists a person_id in the sgn_people.sp_person table
  Ret: $check, with 0 if it is true and 1 if is it false
  Args: $person_id, an integer
  Side_Effects: none
  Example: my $check = exists_person_id($person_id);

=cut

sub exists_sp_person_id {
    my $self = shift;
    my $person_id = shift || croak("FUNCTION PARAMETER ERROR: None sp_person_id was supplied for exists_sp_person_id function");
    my $check;
    unless ($person_id =~ m/^\d+$/) {
	$check = 0;
    } else {
	my $query = "SELECT sp_person_id FROM sgn_people.sp_person WHERE sp_person_id=?";
	my $sth = $self->get_schema()->storage()->dbh()->prepare($query);
	$sth->execute($person_id);
	my ($sp_person_id) = $sth->fetchrow_array();
	if (defined $sp_person_id) {
	    $check = 1;
	} else {
	    $check = 0;
	}
    }
    return $check;
}

=head2 exists_metadata

  Usage: my $check = $self->exists_metadata_id($metadata_id, $metadata_type);
  Desc: Check if exists (true) or not (false) a metadata_id into the database.
  Ret: $check, a scalar with $check=1 for true and $check=0 for false
  Args: $metadata_id, an integer and 
  Side_Effects: none
  Example: if ($self->exists_metadata_id($metadata_id, 'metadata_id') == 1) { }

=cut

sub exists_metadata {
    my $self = shift;
    my $metadata_id = shift;
    my $metadata_type = shift;
    my $check;
    unless ($metadata_id =~ m/^\d+$/) {
	$check = 0;
    } else {
	my $db_metadata_row = $self->get_schema->resultset('Metadata')->search( {metadata_id => $metadata_id} )->single();
	unless (defined $db_metadata_row) {
	    $check = 0;
	} else {
	    my $metadata_data = $db_metadata_row->get_column($metadata_type => $metadata_id);
	    if (defined $metadata_data) {
		$check = 1;
	    } else {
		$check = 0;
	    }
	}
    }
    return $check;
}

=head1 ENFORCE METHODS

  Description: The metadata are data about other data in the database. When you add a new metadata always it is created a new 
               metadata_id according with the metadata_metadata_seq_id and a create_date=now(). But perhaps, there are 
               circunstances you need add a specific metadata_id or/and create_date. For this cases you can use the 
               enforce_insert function.

  Example: There are old data that have not any metadata and you want add it. You know when these data were created (and it is not
            now), so you should use:
 
           my $new_metadata_id = CXGN::SEDM::Metadata->new()->set_create_date($old_date)->enforce_insert()->get_metadata_id();

  Description: Other posibility is that you need update a metadata. In the normal way, update a metadata means, insert a new 
               metadata with a previous_metadata_id=old_metadata_id, create_date=old_create_date, and 
               create_person_id=old_create_person_id and the rest of the metadata that you put into the metadata_object. 
               After that change the obsolete field in the old one to 1 and add obsolete_note, "added new metadata with 
               metadata_id=$new_metadata_id". But perhaps, there are some circunstances where you need really update a 
               metadata line. For this cases you can use the enforce_update function.

  Example: There are some data into the database with the wrong modification_note (It should be the function used to change the
            data but perhaps the function name changes). So, you should use:

           CXGN::SEDM::Metadata->new($metadata_id)->set_modification_note("set_platform_description")->enforce_update();

=cut   

=head2 enforce_insert

  Usage: my $new_metadata_object = $self->enforce_insert();
  Desc: This function enforce to store a new metadata object with all the parameters given by the metadata object, without the
        use of the store function constraints (you can not store an specific metadata_id or create_date). The database constraints
        are still in use. 
  Ret: A new metada_object with the data stored.
  Args: None
  Side_Effects: Store the data into the database without the store function
  Example: my $metadata_object = $self->enforce_insert();

=cut

sub enforce_insert {
    my $self = shift;
    my $create_date = $self->get_metadata_row()->get_column('create_date');
    my $create_person_id = $self->get_metadata_row('create_person_id');
    unless (defined $create_date) {
	croak("DATA INPUT ERROR: The create_date column CAN NOT BE NULL in the metadata_object using enforce_insert function.\n");
    }
    unless (defined $create_person_id) {
	croak("DATA INPUT ERROR: The create_person_id column CAN NOT BE NULL in the metadata_object using enforce_insert function.\n");
    }
    my $new_row = $self->get_metadata_row()->insert();
    my $new_metadata_id = $new_row->get_column('metadata_id');
    my $new_metadata_object = CXGN::SEDM::Metadata->new($self->get_schema, $self->get_object_creation_user, $new_metadata_id);
    return $new_metadata_object;
}

=head2 enforce_update

  Usage: my $new_metadata_object = $self->enforce_update();
  Desc: This function enforce to update an old metadata with all the parameters given in the metadata object or in a hash reference
        with keys=column_name and values=value to search in the database. This function do not use the store() function, so it is free
        of the store constraints (when you use the store function over a metadata_object with a metadata_id that exists into the 
	database, create a new metadata row in the database with the previous_metadata_id = old_metadata_id), and update the data for
        a metadata_object for a concrete conditions given by the hash reference.
  Ret: A new metadata_object
  Args: none or a hash reference with the update conditions
  Side_Effects: return undef if there are not any row to update with these conditions
  Example: my $new_metadata_object = $self->enforce_update();
           my $new_metadata_object = $self->enforce_update({ obsolete => 1 });

=cut

sub enforce_update {
    my $self = shift;
    my $columns_href = shift;
    my $create_date = $self->get_metadata_row()->get_column('create_date');
    my $create_person_id = $self->get_metadata_row('create_person_id');
    unless (defined $create_date) {
	croak("DATA INPUT ERROR: The create_date column CAN NOT BE NULL in the metadata_object using enforce_insert function.\n");
    }
    unless (defined $create_person_id) {
	croak("DATA INPUT ERROR: The create_person_id column CAN NOT BE NULL in the metadata_object using enforce_insert function.\n");
    }
    my $row_updated = $self->get_metadata_row()->update($columns_href);
    my $metadata_id = $row_updated->id();
    my $metadata_object;
    if (defined $metadata_id) {
	$metadata_object = CXGN::SEDM::Metadata->new($self->get_schema, $self->get_object_creation_user, $metadata_id);
    }
    return $metadata_object;
}





###########
return 1;##
###########
