#!/usr/bin/perl

#use strict;

use Test::More qw /no_plan/;
use CXGN::BioTools::CapsDesigner2;
use Cwd 'realpath';

my $curdir = realpath($0);
$curdir =~ s/\/[^\/]*$//;

my $fasta_file1 = CXGN::BioTools::CapsDesigner2::check_fasta('$curdir/data/FASTAtest1.txt');
my $fasta_file2 = CXGN::BioTools::CapsDesigner2::check_fasta("$curdir/data/FASTAtest2.txt");
my $fasta_file3 = CXGN::BioTools::CapsDesigner2::check_fasta("$curdir/data/FASTAtest3.txt");
my $clustal_file1 = CXGN::BioTools::CapsDesigner2::check_clustal("$curdir/data/CLUSTALtest1.txt");
my $clustal_file2 = CXGN::BioTools::CapsDesigner2::check_clustal("$curdir/data/CLUSTALtest2.txt");
my $seq_num = CXGN::BioTools::CapsDesigner2::check_input_number("$curdir/data/FASTAtest3.txt");
my $seq_num2 = CXGN::BioTools::CapsDesigner2::check_input_number("$curdir/data/FASTAtest1.txt");
my $seq_test = CXGN::BioTools::CapsDesigner2::check_seqs({'id1' => 'aaaaaaaatttttgggggggc', 'id2' => 'NNNNNNNNTTTTTTTTTGGGGGGG', 'id3' => 'cccc'});
my $seq_test2 = CXGN::BioTools::CapsDesigner2::check_seqs({'id1' => 'aaaaatttttgggggc', 'id2' => 'NNNNNNNNTTTTTTGGGGGGG', 'id3' => 'cccczzzzzzzzz'});
my ($seqlength, $parent_info_ref) = CXGN::BioTools::CapsDesigner2::get_seqs("$curdir/data/FASTAtest4.txt");
my %par_info = %$parent_info_ref;
my ($cost_ref, $cut_ref) = CXGN::BioTools::CapsDesigner2::read_enzyme_file("$curdir/../../../../sgn/support_data/caps_designer/allENZYME");
my %cost = %$cost_ref;
my %cut = %$cut_ref;
my ($substrings_ref, $cutsites_ref, $uniques_ref) = CXGN::BioTools::CapsDesigner2::find_caps($parent_info_ref, $seqlength, $cut_ref, 3, 2, $cost_ref, 0);
my %subs = %$substrings_ref;
my %cutsites = %$cutsites_ref;
my %uniques = %$uniques_ref;
my $size_ref = CXGN::BioTools::CapsDesigner2::predict_fragments($cutsites_ref, $seqlength);
my %size = %$size_ref;

ok($fasta_file1, "Fasta file 1");
is($fasta_file2, "Your sequences do not appear to be in FASTA format.", "Fasta file 2");
is($fasta_file3, "Oops - your input sequences need to have different names.", "Fasta file 3");
ok($clustal_file1, "Clustal file 1");
is($clustal_file2, "Your sequences do not appear to be in CLUSTAL format.", "Clustal file 2");
is($seq_num, 3, "Input number test 1");
is($seq_num2, 2, "Input number test 2");
is($seq_test, 1, "Check sequences 1");
is($seq_test2, 0, "Check sequences 2");
is($seqlength, 23, "Sequence length");
is($par_info{"sq1"}, "AAAAAAAAAGATTCCCGGAAAAA", "Parent info 1");
is($par_info{"sq2"}, "AAAAATTAAGATTCCCGGAAAAA", "Parent info 2");
is($par_info{"sq3"}, "AAAAAAAAAGATTGCCGTAAAAA", "Parent info 3");
is($cost{"HindIII"}, 'HindIII,10000u/$53', "Enzyme cost test 1");
is($cost{"TauI"}, undef, "Enzyme cost test 2");
is($cut{"PshAI"}, "GAC....GTC", "Enzyme cut test 1");
is($cut{"ApaLI"}, "GTGCAC", "Enzyme cut test 2");
is($cut{"ZraI/AatII"}, "GACGTC", "Enzyme cut test 3");
is($uniques{"HinfI"}{10}, "sq3", "Uniques test 1");
is($uniques{"MspI"}{15}, "sq3", "Uniques test 2");
is($uniques{"NciI"}{15}, "sq3", "Uniques test 3");
is($uniques{"PfoI"}{13}, "sq3", "Uniques test 4");
is($uniques{"ScrFI"}{15}, "sq3", "Uniques test 5");
is($uniques{"Tsp509I"}{3}, "sq2", "Uniques test 6");
is(@{$cutsites{"HinfI"}{"sq1"}}[0], 10, "Cutsites test 1");
is(@{$cutsites{"HinfI"}{"sq2"}}[0], 10, "Cutsites test 2");
is(@{$cutsites{"HinfI"}{"sq3"}}[0], undef, "Cutsites test 3");
is(@{$cutsites{"MspI"}{"sq1"}}[0], 15, "Cutsites test 4");
is(@{$cutsites{"MspI"}{"sq2"}}[0], 15, "Cutsites test 5");
is(@{$cutsites{"MspI"}{"sq3"}}[0], undef, "Cutsites test 6");
is(@{$cutsites{"NciI"}{"sq1"}}[0], 15, "Cutsites test 7");
is(@{$cutsites{"NciI"}{"sq2"}}[0], 15, "Cutsites test 8");
is(@{$cutsites{"NciI"}{"sq3"}}[0], undef, "Cutsites test 9");
is(@{$cutsites{"PfoI"}{"sq1"}}[0], 13, "Cutsites test 10");
is(@{$cutsites{"PfoI"}{"sq2"}}[0], 13, "Cutsites test 11");
is(@{$cutsites{"PfoI"}{"sq3"}}[0], undef, "Cutsites test 12");
is(@{$cutsites{"ScrFI"}{"sq1"}}[0], 15, "Cutsites test 13");
is(@{$cutsites{"ScrFI"}{"sq2"}}[0], 15, "Cutsites test 14");
is(@{$cutsites{"ScrFI"}{"sq3"}}[0], undef, "Cutsites test 15");
is(@{$cutsites{"Tsp509I"}{"sq1"}}[0], undef, "Cutsites test 16");
is(@{$cutsites{"Tsp509I"}{"sq2"}}[0], 3, "Cutsites test 17");
is(@{$cutsites{"Tsp509I"}{"sq3"}}[0], undef, "Cutsites test 18");
is(@{$cutsites{"HinfI"}{"sq2"}}[1], undef, "Cutsites test 19"); #test a few to ensure no additional elements
is(@{$cutsites{"Tsp509I"}{"sq3"}}[1], undef, "Cutsites test 20");
is($subs{"HinfI"}{10}{"sq1"}, "aaaaaaaaaGATTCccggaaaaa", "Substrings test 1");
is($subs{"HinfI"}{10}{"sq2"}, "aaaaattaaGATTCccggaaaaa", "Substrings test 2");
is($subs{"HinfI"}{10}{"sq3"}, "aaaaaaaaaGATTGccgtaaaaa", "Substrings test 3");
is($subs{"MspI"}{15}{"sq1"}, "aaaagattcCCGGaaaaa", "Substrings test 4");
is($subs{"MspI"}{15}{"sq2"}, "ttaagattcCCGGaaaaa", "Substrings test 5");
is($subs{"MspI"}{15}{"sq3"}, "aaaagattgCCGTaaaaa", "Substrings test 6");
is($subs{"NciI"}{15}{"sq1"}, "aaaagattCCCGGaaaaa", "Substrings test 7");
is($subs{"NciI"}{15}{"sq2"}, "ttaagattCCCGGaaaaa", "Substrings test 8");
is($subs{"NciI"}{15}{"sq3"}, "aaaagattGCCGTaaaaa", "Substrings test 9");
is($subs{"PfoI"}{13}{"sq1"},"aaaaaaaaagatTCCCGGAaaaa", "Substrings test 10");
is($subs{"PfoI"}{13}{"sq2"},"aaaaattaagatTCCCGGAaaaa", "Substrings test 11");
is($subs{"PfoI"}{13}{"sq3"},"aaaaaaaaagatTGCCGTAaaaa", "Substrings test 12");
is($subs{"ScrFI"}{15}{"sq1"}, "aaaagattCCCGGaaaaa", "Substrings test 13");
is($subs{"ScrFI"}{15}{"sq2"}, "ttaagattCCCGGaaaaa", "Substrings test 14");
is($subs{"ScrFI"}{15}{"sq3"},"aaaagattGCCGTaaaaa", "Substrings test 15");
is($subs{"Tsp509I"}{3}{"sq1"}, "aaaAAAAaagattcccggaaaaa", "Substrings test 16");
is($subs{"Tsp509I"}{3}{"sq2"}, "aaaAATTaagattcccggaaaaa", "Substrings test 17");
is($subs{"Tsp509I"}{3}{"sq3"}, "aaaAAAAaagattgccgtaaaaa", "Substrings test 18");
is(@{$size{"HinfI"}{"sq1"}}[0,1], qw/10 13/, "Fragments test 1");
is(@{$size{"HinfI"}{"sq2"}}[0,1], qw/10 13/, "Fragments test 2");
is(@{$size{"HinfI"}{"sq3"}}[0], qw/23/, "Fragments test 3");
is(@{$size{"MspI"}{"sq1"}}[0,1], qw/15 8/, "Fragments test 4");
is(@{$size{"MspI"}{"sq2"}}[0,1], qw/15 8/, "Fragments test 5");
is(@{$size{"MspI"}{"sq3"}}[0], qw/23/, "Fragments test 6");
is(@{$size{"NciI"}{"sq1"}}[0,1], qw/15 8/, "Fragments test 7");
is(@{$size{"NciI"}{"sq2"}}[0,1], qw/15 8/, "Fragments test 8");
is(@{$size{"NciI"}{"sq3"}}[0], qw/23/, "Fragments test 9");
is(@{$size{"PfoI"}{"sq1"}}[0,1], qw/13 10/, "Fragments test 10");
is(@{$size{"PfoI"}{"sq2"}}[0,1], qw/13 10/, "Fragments test 11");
is(@{$size{"PfoI"}{"sq3"}}[0], qw/23/, "Fragments test 12");
is(@{$size{"ScrFI"}{"sq1"}}[0,1], qw/15 8/, "Fragments test 13");
is(@{$size{"ScrFI"}{"sq2"}}[0,1], qw/15 8/, "Fragments test 14");
is(@{$size{"ScrFI"}{"sq3"}}[0], qw/23/, "Fragments test 15");
is(@{$size{"Tsp509I"}{"sq1"}}[0], qw/23/, "Fragments test 16");
is(@{$size{"Tsp509I"}{"sq2"}}[0,1], qw/3 20/, "Fragments test 17");
is(@{$size{"Tsp509I"}{"sq3"}}[0], qw/23/, "Fragments test 18");
